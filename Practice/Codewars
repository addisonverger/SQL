--Challenges provided by Codewars: https://www.codewars.com/kata/search/sql?q=&beta=false&order_by=sort_date%20desc

--Even or Odd

SELECT number, CASE WHEN number % 2 = 0 THEN 'Even' ELSE 'Odd' END AS 'is_even'
FROM numbers;

--Hello SQL World!

SELECT 'hello world!' AS "Greeting"

--SQL: Right and Left

SELECT LEFT(project, commits) AS project, RIGHT(address, contributors) AS address
FROM repositories

--SQL: Concatenating Columns

SELECT CONCAT_WS(' ', prefix, first, last, suffix) AS title
FROM names

--SQL Basics: Maths with String Manipulations

SELECT BIT_LENGTH(name) + LENGTH(race) AS calculation
FROM demographics

--Maximum Multiple

SELECT CAST(FLOOR(bound / divisor) * divisor AS int) AS res
FROM max_multiple

--Disemvowel Trolls

SELECT str, TRANSLATE(str, 'aeiouAEIOU', '') AS res 
FROM disemvowel

--SQL Basics: Simple WITH

WITH special_sales AS (
  SELECT *
  FROM sales
  WHERE price > 90.00
)

SELECT id, name
FROM departments
WHERE id IN (SELECT department_id FROM special_sales)

--SQL Basics - Trimming the Field

SELECT 
  id, 
  name, 
  CASE
    WHEN POSITION(',' IN characteristics) <> 0
    THEN LEFT(characteristics, POSITION(',' IN characteristics) - 1) 
    ELSE characteristics
  END AS characteristic
FROM monsters
ORDER BY id

--GROCERY STORE: Inventory

SELECT id, name, stock
FROM products
WHERE producent = 'CompanyA'
AND stock <= 2
ORDER BY id

--Countries Capitals for Trivia Night (SQL for Beginners #6)

SELECT capital
FROM countries
WHERE continent IN ('Africa', 'Afrika')
AND country LIKE 'E%'
ORDER BY capital
LIMIT 3

--SQL Bug Fixing: Fix the JOIN

SELECT 
  DISTINCT j.job_title,
  CAST(ROUND(SUM(j.salary) / COUNT(p.id), 2) AS FLOAT) as average_salary,
  COUNT(p.id) as total_people,
  CAST(ROUND(SUM(j.salary), 2) AS FLOAT) as total_salary
FROM people p
JOIN job j
ON p.id = j.people_id
GROUP BY j.job_title
ORDER BY 2 DESC

--SQL Basics: Simple EXISTS

SELECT id, name
FROM departments d
WHERE EXISTS (
  SELECT department_id
  FROM sales s
  WHERE price > 98.00
  AND d.id = s.department_id
)

--Using LATERAL JOIN To Get Top N per Group

SELECT c.id AS category_id, c.category, p.title, p.views, p.post_id
FROM categories c
LEFT JOIN LATERAL (
  SELECT id AS post_id, category_id, title, views
  FROM posts 
  WHERE c.id = category_id
  ORDER BY views DESC, id
  LIMIT 2
) p
ON c.id = p.category_id
ORDER BY c.category, p.views DESC, p.post_id

--Counting overlapping events

SELECT v1.entry_time AS when_happened, COUNT(*) AS visits_count
FROM visits v1
JOIN visits v2
ON v1.entry_time >= v2.entry_time
AND v1.entry_time < v2.exit_time
GROUP BY v1.id
ORDER BY 2 DESC, 1
LIMIT 1

--SQL Basics: Simple PIVOTING data

CREATE EXTENSION tablefunc;

SELECT *
FROM CROSSTAB(
  'SELECT p.name, d.detail, COUNT(d.id)
  FROM products p
  JOIN details d
  ON p.id = d.product_id
  GROUP BY 1, 2
  ORDER BY 1'
)
AS ct (name TEXT, bad BIGINT, good BIGINT, ok BIGINT)

--Present JSON data the SQL way

SELECT
data->>'first_name' AS first_name,
data->>'last_name' AS last_name,
EXTRACT(YEAR FROM AGE(NOW(), (data->>'date_of_birth')::DATE))::INTEGER as age,
CASE
  WHEN data->>'private' = 'true'
  THEN 'Hidden'
  WHEN data->>'private' = 'false' AND data#>>'{email_addresses, 0}' IS NULL
  THEN 'None'
  ELSE data#>>'{email_addresses, 0}'
END AS email_address
FROM users
ORDER BY 1, 2

--Grasshopper - Terminal game move function

SELECT position, roll, position + roll * 2 AS res
FROM moves

--Is n divisible by x and y?

SELECT id, CASE WHEN n % x = 0 AND n % y = 0 THEN 1 ELSE 0 END as res
FROM kata

--Parameterized SQL: Section Access Control

prepare find_sections(int) as
  SELECT id, section_name
  FROM section_access
  WHERE $1 = ANY(REGEXP_SPLIT_TO_ARRAY(user_access,',')::int[])
  ORDER BY 1

--Genre Analysis with PostgreSQL Arrays

SELECT UNNEST(genres) AS genre, COUNT(*) AS count, ARRAY_AGG(title ORDER BY title) AS books
FROM books
GROUP BY 1
ORDER BY 2 DESC, 1 ASC

--Hosts Missing Specific Software Title and Having Recent Installations

SELECT host 
FROM host_software 
GROUP BY host
HAVING EVERY(software_title <> 'Title2') 
AND MAX(install_date) >= CURRENT_DATE - INTERVAL '1 year'
ORDER BY host

--Beginner Series #1 School Paperwork

SELECT 
  n, 
  m,
  CASE
    WHEN n < 0 OR m < 0 THEN 0
    ELSE n * m
  END AS res
FROM paperwork

--Remove First and Last Character

SELECT s, RIGHT(LEFT(s, LENGTH(s) - 1), LENGTH(s) - 2) AS res
FROM removechar

--Cats and shelves

SELECT 
  a, 
  b,
  CAST(FLOOR((b - a) / 3) + ((b - a) % 3) AS INTEGER) AS res
FROM jumps

--Vowel Count

SELECT str, LENGTH(str) - LENGTH(TRANSLATE(str, 'aeiouAEIOU', '')) AS res
FROM getcount

--Quarter of the year

SELECT 
  month,
  CASE
    WHEN month BETWEEN 1 AND 3 THEN 1
    WHEN month BETWEEN 4 AND 6 THEN 2
    WHEN month BETWEEN 7 AND 9 THEN 3
    ELSE 4
  END AS res
FROM quarterof

--Expressions Matter

SELECT GREATEST(a + b * c, a * b + c, a * (b + c), (a + b) * c, a + b + c, a * b * c) AS res 
FROM expression_matter

--Century From Year

SELECT yr, CEILING(yr::DECIMAL / 100)::INTEGER AS century
FROM years

--Third Angle of a Triangle

SELECT a, b, 180-a-b AS res
FROM otherangle

--SQL Basics: Mod

SELECT number1 % number2 AS mod
FROM decimals

--Easy SQL: Square Root and Log

SELECT SQRT(number1) AS root, LOG(number2) AS log
FROM decimals

--Easy SQL: Rounding Decimals

SELECT FLOOR(number1) AS number1, CEILING(number2) AS number2
FROM decimals

--Easy SQL: Convert to Hexadecimal

SELECT TO_HEX(legs) AS legs, TO_HEX(arms) AS arms
FROM monsters

--Easy SQL: LowerCase

SELECT id, name, birthday, LOWER(race) AS race
FROM demographics

--Easy SQL - Ordering

SELECT *
FROM companies
ORDER BY employees DESC

--Count Odd Numbers below n

SELECT n, FLOOR(n / 2.0)::BIGINT AS res
FROM oddcount

--Get Nth Even Number

SELECT n, n * 2 - 2 AS res
FROM ntheven

--Adults only (SQL for Beginners #1)

SELECT name, age
FROM users
WHERE age >= 18

--On the Canadian Border (SQL for Beginners #2)

SELECT name, country
FROM travelers
WHERE country NOT IN ('Canada', 'Mexico', 'USA')

--Register for the Party (SQL for Beginners #3)

INSERT INTO participants VALUES ('Addison', 30, true);

SELECT * FROM participants;

--Collect Tuition (SQL for Beginners #4)

SELECT *
FROM students
WHERE tuition_received = false

--Will you make it?

SELECT 
  distance_to_pump, 
  mpg, 
  fuel_left, 
  CASE 
    WHEN mpg * fuel_left >= distance_to_pump THEN true 
    ELSE false 
  END AS res
FROM zerofuel

--Simple multiplication

SELECT 
  number, 
  CASE 
    WHEN number % 2 = 0 THEN number * 8 
    ELSE number * 9 
  END AS res
FROM multiplication

--Keep Hydrated!

SELECT id, hours, FLOOR(hours * 0.5) AS liters
FROM cycling

--SQL Grasshopper: Select Columns

SELECT custid, custname, custstate
FROM customers

--SQL Basics: Simple DISTINCT

SELECT DISTINCT age
FROM people

--SQL Basics: Simple MIN / MAX

SELECT MIN(age) AS age_min, MAX(age) AS age_max
FROM people

--SQL Basics: Simple SUM

SELECT SUM(age) AS age_sum
FROM people

--1. Find all active students

SELECT *
FROM students
WHERE isActive = 1

--SQL Basics: Simple WHERE and ORDER BY

SELECT *
FROM people
WHERE age > 50
ORDER BY age DESC

--Fake Binary

SELECT x, TRANSLATE(x, '123456789', '000011111') AS res 
FROM fakebin

--Remove String Spaces

SELECT x, REPLACE(x, ' ', '') AS res
FROM nospace

--Is it a palindrome?

SELECT 
  str,
  CASE
    WHEN LOWER(str) = REVERSE(LOWER(str)) THEN true
    ELSE false
  END AS res
FROM ispalindrome

--String repeat

SELECT s, n, REPEAT(s, n) AS res
FROM repeatstr

--Remove exclamation marks

SELECT s, REPLACE(s, '!', '') AS res
FROM removeexclamationmarks

--MakeUpperCase

SELECT s, UPPER(s) AS res
FROM makeuppercase

--Count the number of cubes with paint on

SELECT n, CASE WHEN n = 0 THEN 1 ELSE CAST(POWER(n + 1, 3) - POWER(n - 1, 3) AS INTEGER) END AS res
FROM squares

--Opposite number

SELECT number * -1 AS res
FROM opposite

--Never visit a . . . !?

SELECT 'apple' AS res 
FROM sub_sum

--Beginner Series #2 Clock

SELECT (h * 3600000) + (m * 60000) + (s * 1000) AS res 
FROM past

--Grasshopper - Messi goals function

SELECT la_liga_goals + copa_del_rey_goals + champions_league_goals AS res
FROM goals

--Grasshopper - Summation

SELECT n, (n + 1) * n / 2 AS res
FROM kata

--Grasshopper - Check for factor

SELECT id, base % factor = 0 AS res
FROM kata

--Returning Strings

SELECT 'Hello, ' || name || ' how are you doing today?' AS greeting
FROM person

--Opposites Attract

SELECT 
  flower1, 
  flower2, 
  CASE 
    WHEN flower1 % 2 = flower2 % 2 THEN false
    ELSE true
  END AS res
FROM love

--Convert boolean values to strings 'Yes' or 'No'.

SELECT 
  bool, 
  CASE 
    WHEN bool THEN 'Yes' 
    ELSE 'No' 
  END AS res
FROM booltoword

--Function 2 - squaring an argument

SELECT n, POWER(n, 2)::INT AS res
FROM square

--Reversed Strings

SELECT str, REVERSE(str) AS res
FROM solution

--Multiply

SELECT price * amount AS total FROM items

--Top-Scoring Students Across All Subjects

WITH max_rate AS (
  SELECT subject_id, MAX(mark_rate) AS max_mark
  FROM marks 
  GROUP BY subject_id
)

SELECT s.student_id, s.student_name
FROM students s
JOIN marks m
ON s.student_id = m.student_id
JOIN max_rate mr
ON m.subject_id = mr.subject_id
GROUP BY 1, 2
HAVING EVERY(m.mark_rate = mr.max_mark)
ORDER BY 1 DESC

--Top-Scoring Students for Each Subject

WITH max_marks_CTE AS (
  SELECT s.student_id, s.student_name, m.subject_id, subject_name, mark_rate
  FROM students s
  JOIN marks m
  ON s.student_id = m.student_id
  JOIN subjects sub 
  ON m.subject_id = sub.subject_id
  WHERE (m.subject_id, m.mark_rate) IN (
    SELECT subject_id, MAX(mark_rate) AS max_mark
    FROM marks
    GROUP BY 1
  )
)

SELECT ARRAY_AGG(student_name ORDER BY student_id) AS student_names, subject_name, mark_rate
FROM max_marks_CTE
GROUP BY subject_id, 2, 3
ORDER BY subject_id

--Centered pentagonal number

SELECT 
  n, 
  CASE WHEN n <= 0 THEN -1 ELSE ((5 * POWER(n, 2) - 5 * n + 2) / 2)::BIGINT END AS res
FROM pentagonal

--Count up the points for the 7 Wonders board game! Easy version

SELECT 
  id, 
  compasses, 
  gears, 
  tablets,
  (LEAST(compasses, gears, tablets) * 7 + POWER(compasses, 2) + POWER(gears, 2) + POWER(tablets, 2))::INT AS res
FROM seven_wonders_science

--SQL with LOTR: Elven Wildcards

SELECT INITCAP(firstname || ' ' || lastname) AS shortlist
FROM elves
WHERE firstname LIKE '%tegil%'
OR lastname LIKE '%astar%'

--SQL with Street Fighter: Total Wins

SELECT name, SUM(won) AS won, SUM(lost) AS lost
FROM fighters f
JOIN winning_moves w
ON f.move_id = w.id
WHERE w.move NOT IN ('Hadoken', 'Shouoken', 'Kikoken')
GROUP BY name
ORDER BY 2 DESC
LIMIT 6

--SQL with Harry Potter: Sorting Hat Comparators

SELECT *
FROM students
WHERE (quality1 = 'evil' AND quality2 = 'cunning')
OR (quality1 = 'brave' AND quality2 <> 'evil')
OR (quality1 = 'studious' OR quality2 = 'intelligent')
OR (quality1 = 'hufflepuff' OR quality2 = 'hufflepuff')
ORDER BY id ASC

--SQL with Pokemon: Damage Multipliers

SELECT pokemon_name, str * multiplier AS modifiedStrength, element
FROM pokemon p
JOIN multipliers m
ON p.element_id = m.id
WHERE str * multiplier >= 40
ORDER BY 2 DESC

--SQL with Sailor Moon: Thinking about JOINs...

SELECT senshi_name AS sailor_senshi, real_name_jpn AS real_name, name AS cat, school
FROM sailorsenshi ss
LEFT JOIN cats c
ON ss.cat_id = c.id
LEFT JOIN schools s
ON ss.school_id = s.id

--GROCERY STORE: Real Price!

SELECT name, weight, price, ROUND((price * 1000 / weight)::NUMERIC, 2)::FLOAT AS price_per_kg
FROM products
ORDER BY 4 ASC, 1 ASC
