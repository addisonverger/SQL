--Challenges provided by Codewars: https://www.codewars.com/kata/search/sql?q=&beta=false&order_by=sort_date%20desc

--Even or Odd

SELECT number, CASE WHEN number % 2 = 0 THEN 'Even' ELSE 'Odd' END AS 'is_even'
FROM numbers;

--Hello SQL World!

SELECT 'hello world!' AS "Greeting"

--SQL: Right and Left

SELECT LEFT(project, commits) AS project, RIGHT(address, contributors) AS address
FROM repositories

--SQL: Concatenating Columns

SELECT CONCAT_WS(' ', prefix, first, last, suffix) AS title
FROM names

--SQL Basics: Maths with String Manipulations

SELECT BIT_LENGTH(name) + LENGTH(race) AS calculation
FROM demographics

--Maximum Multiple

SELECT CAST(FLOOR(bound / divisor) * divisor AS int) AS res
FROM max_multiple

--Disemvowel Trolls

SELECT str, TRANSLATE(str, 'aeiouAEIOU', '') AS res 
FROM disemvowel

--SQL Basics: Simple WITH

WITH special_sales AS (
  SELECT *
  FROM sales
  WHERE price > 90.00
)

SELECT id, name
FROM departments
WHERE id IN (SELECT department_id FROM special_sales)

--SQL Basics - Trimming the Field

SELECT 
  id, 
  name, 
  CASE
    WHEN POSITION(',' IN characteristics) <> 0
    THEN LEFT(characteristics, POSITION(',' IN characteristics) - 1) 
    ELSE characteristics
  END AS characteristic
FROM monsters
ORDER BY id

--GROCERY STORE: Inventory

SELECT id, name, stock
FROM products
WHERE producent = 'CompanyA'
AND stock <= 2
ORDER BY id

--Countries Capitals for Trivia Night (SQL for Beginners #6)

SELECT capital
FROM countries
WHERE continent IN ('Africa', 'Afrika')
AND country LIKE 'E%'
ORDER BY capital
LIMIT 3

--SQL Bug Fixing: Fix the JOIN

SELECT 
  DISTINCT j.job_title,
  CAST(ROUND(SUM(j.salary) / COUNT(p.id), 2) AS FLOAT) as average_salary,
  COUNT(p.id) as total_people,
  CAST(ROUND(SUM(j.salary), 2) AS FLOAT) as total_salary
FROM people p
JOIN job j
ON p.id = j.people_id
GROUP BY j.job_title
ORDER BY 2 DESC

--SQL Basics: Simple EXISTS

SELECT id, name
FROM departments d
WHERE EXISTS (
  SELECT department_id
  FROM sales s
  WHERE price > 98.00
  AND d.id = s.department_id
)

--Using LATERAL JOIN To Get Top N per Group

SELECT c.id AS category_id, c.category, p.title, p.views, p.post_id
FROM categories c
LEFT JOIN LATERAL (
  SELECT id AS post_id, category_id, title, views
  FROM posts 
  WHERE c.id = category_id
  ORDER BY views DESC, id
  LIMIT 2
) p
ON c.id = p.category_id
ORDER BY c.category, p.views DESC, p.post_id

--Counting overlapping events

SELECT v1.entry_time AS when_happened, COUNT(*) AS visits_count
FROM visits v1
JOIN visits v2
ON v1.entry_time >= v2.entry_time
AND v1.entry_time < v2.exit_time
GROUP BY v1.id
ORDER BY 2 DESC, 1
LIMIT 1

--SQL Basics: Simple PIVOTING data

CREATE EXTENSION tablefunc;

SELECT *
FROM CROSSTAB(
  'SELECT p.name, d.detail, COUNT(d.id)
  FROM products p
  JOIN details d
  ON p.id = d.product_id
  GROUP BY 1, 2
  ORDER BY 1'
)
AS ct (name TEXT, bad BIGINT, good BIGINT, ok BIGINT)

--Present JSON data the SQL way

SELECT
data->>'first_name' AS first_name,
data->>'last_name' AS last_name,
EXTRACT(YEAR FROM AGE(NOW(), (data->>'date_of_birth')::DATE))::INTEGER as age,
CASE
  WHEN data->>'private' = 'true'
  THEN 'Hidden'
  WHEN data->>'private' = 'false' AND data#>>'{email_addresses, 0}' IS NULL
  THEN 'None'
  ELSE data#>>'{email_addresses, 0}'
END AS email_address
FROM users
ORDER BY 1, 2

--Grasshopper - Terminal game move function

SELECT position, roll, position + roll * 2 AS res
FROM moves

--Is n divisible by x and y?

SELECT id, CASE WHEN n % x = 0 AND n % y = 0 THEN 1 ELSE 0 END as res
FROM kata

--Parameterized SQL: Section Access Control

prepare find_sections(int) as
  SELECT id, section_name
  FROM section_access
  WHERE $1 = ANY(REGEXP_SPLIT_TO_ARRAY(user_access,',')::int[])
  ORDER BY 1

--Genre Analysis with PostgreSQL Arrays

SELECT UNNEST(genres) AS genre, COUNT(*) AS count, ARRAY_AGG(title ORDER BY title) AS books
FROM books
GROUP BY 1
ORDER BY 2 DESC, 1 ASC

--Hosts Missing Specific Software Title and Having Recent Installations

SELECT host 
FROM host_software 
GROUP BY host
HAVING EVERY(software_title <> 'Title2') 
AND MAX(install_date) >= CURRENT_DATE - INTERVAL '1 year'
ORDER BY host

--Beginner Series #1 School Paperwork

SELECT 
  n, 
  m,
  CASE
    WHEN n < 0 OR m < 0 THEN 0
    ELSE n * m
  END AS res
FROM paperwork

--Remove First and Last Character

SELECT s, RIGHT(LEFT(s, LENGTH(s) - 1), LENGTH(s) - 2) AS res
FROM removechar

--Cats and shelves

SELECT 
  a, 
  b,
  CAST(FLOOR((b - a) / 3) + ((b - a) % 3) AS INTEGER) AS res
FROM jumps

--Vowel Count

SELECT str, LENGTH(str) - LENGTH(TRANSLATE(str, 'aeiouAEIOU', '')) AS res
FROM getcount

--Quarter of the year

SELECT 
  month,
  CASE
    WHEN month BETWEEN 1 AND 3 THEN 1
    WHEN month BETWEEN 4 AND 6 THEN 2
    WHEN month BETWEEN 7 AND 9 THEN 3
    ELSE 4
  END AS res
FROM quarterof

--Expressions Matter

SELECT GREATEST(a + b * c, a * b + c, a * (b + c), (a + b) * c, a + b + c, a * b * c) AS res 
FROM expression_matter

--Century From Year

SELECT yr, CEILING(yr::DECIMAL / 100)::INTEGER AS century
FROM years
