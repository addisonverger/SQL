--Challenges provided by Codewars: https://www.codewars.com/kata/search/sql?q=&beta=false&order_by=sort_date%20desc

--Even or Odd

SELECT number, CASE WHEN number % 2 = 0 THEN 'Even' ELSE 'Odd' END AS 'is_even'
FROM numbers;

--Hello SQL World!

SELECT 'hello world!' AS "Greeting"

--SQL: Right and Left

SELECT LEFT(project, commits) AS project, RIGHT(address, contributors) AS address
FROM repositories

--SQL: Concatenating Columns

SELECT CONCAT_WS(' ', prefix, first, last, suffix) AS title
FROM names

--SQL Basics: Maths with String Manipulations

SELECT BIT_LENGTH(name) + LENGTH(race) AS calculation
FROM demographics

--Maximum Multiple

SELECT CAST(FLOOR(bound / divisor) * divisor AS int) AS res
FROM max_multiple

--Disemvowel Trolls

SELECT str, TRANSLATE(str, 'aeiouAEIOU', '') AS res 
FROM disemvowel

--SQL Basics: Simple WITH

WITH special_sales AS (
  SELECT *
  FROM sales
  WHERE price > 90.00
)

SELECT id, name
FROM departments
WHERE id IN (SELECT department_id FROM special_sales)

--SQL Basics - Trimming the Field

SELECT 
  id, 
  name, 
  CASE
    WHEN POSITION(',' IN characteristics) <> 0
    THEN LEFT(characteristics, POSITION(',' IN characteristics) - 1) 
    ELSE characteristics
  END AS characteristic
FROM monsters
ORDER BY id

--GROCERY STORE: Inventory

SELECT id, name, stock
FROM products
WHERE producent = 'CompanyA'
AND stock <= 2
ORDER BY id

--Countries Capitals for Trivia Night (SQL for Beginners #6)

SELECT capital
FROM countries
WHERE continent IN ('Africa', 'Afrika')
AND country LIKE 'E%'
ORDER BY capital
LIMIT 3

--SQL Bug Fixing: Fix the JOIN

SELECT 
  DISTINCT j.job_title,
  CAST(ROUND(SUM(j.salary) / COUNT(p.id), 2) AS FLOAT) as average_salary,
  COUNT(p.id) as total_people,
  CAST(ROUND(SUM(j.salary), 2) AS FLOAT) as total_salary
FROM people p
JOIN job j
ON p.id = j.people_id
GROUP BY j.job_title
ORDER BY 2 DESC

--SQL Basics: Simple EXISTS

SELECT id, name
FROM departments d
WHERE EXISTS (
  SELECT department_id
  FROM sales s
  WHERE price > 98.00
  AND d.id = s.department_id
)

--Using LATERAL JOIN To Get Top N per Group

SELECT c.id AS category_id, c.category, p.title, p.views, p.post_id
FROM categories c
LEFT JOIN LATERAL (
  SELECT id AS post_id, category_id, title, views
  FROM posts 
  WHERE c.id = category_id
  ORDER BY views DESC, id
  LIMIT 2
) p
ON c.id = p.category_id
ORDER BY c.category, p.views DESC, p.post_id
