--Challenges provided by Coding Ninjas: https://www.codingninjas.com/studio/problems?category[]=SQL%20Databases

--IMDb Metacritic Rating

SELECT 
    i.title,
    i.rating
FROM IMDB i
JOIN earning e
ON i.movie_id = e.movie_id
WHERE SUBSTRING(i.title, LENGTH(i.title) - 4, 4) = '2012'
AND i.metaCritic > 60
AND e.domestic > 100000000;

--IMDb Max Weighted Rating

SELECT g.genre, MAX((i.rating + i.metaCritic/10.0)/2) AS weighted_rating
FROM genre g
JOIN imdb i 
ON g.movie_id = i.movie_id
WHERE SUBSTRING(i.title, LENGTH(i.title) - 4, 4) = '2014'
GROUP BY 1
HAVING g.genre IS NOT NULL
AND g.genre <> ''
AND MAX((i.rating + i.metaCritic/10.0)/2) IS NOT NULL
AND MAX((i.rating + i.metaCritic/10.0)/2) <> 0
ORDER BY 1 ASC;

--IMDb Rating

SELECT i.title, i.rating
FROM imdb i
JOIN genre g 
ON i.movie_id = g.movie_id
WHERE g.genre LIKE 'C%'
AND i.title LIKE '%2014%'
AND i.budget > 40000000;

--IMDb Genre

SELECT g.genre, MAX(e.domestic + e.worldwide - i.budget) AS net_profit
FROM imdb i
JOIN genre g 
ON i.movie_id = g.movie_id
JOIN earning e
ON i.movie_id = e.movie_id
WHERE i.title LIKE '%2012%'
GROUP BY 1
HAVING g.genre IS NOT NULL
AND g.genre <> ''
AND MAX(e.domestic + e.worldwide - i.budget) IS NOT NULL
AND MAX(e.domestic + e.worldwide - i.budget) <> 0
ORDER BY 1 ASC;

--Students DB

INSERT INTO students VALUES (3, 'Kim', 'F'), (4, 'Molina', 'F'), (5, 'Dev', 'M');

SELECT * FROM students;

--Big Countries

SELECT name, population, area
FROM world
WHERE area > 3000000
OR population > 25000000;

--Sales Executive

SELECT name
FROM salesperson
WHERE sales_id NOT IN (
    SELECT o.sales_id
    FROM orders o 
    JOIN company c 
    ON o.com_id = c.com_id
    WHERE c.name = 'RED'
);

--Director's Actor

SELECT actor_id, director_id
FROM actorDirector
WHERE actor_id = director_id
GROUP BY 1, 2
HAVING COUNT(*) >= 3;

--Combine Two Tables

SELECT p.firstName, p.lastName, a.city, a.state
FROM person p 
LEFT JOIN address a 
ON p.personId = a.personId;

--Second Highest Salary

SELECT salary
FROM (
    SELECT salary, RANK() OVER (ORDER BY salary DESC) AS rnk
    FROM employee
) salary_rnk
WHERE rnk = 2;

--Rising Temperature

SELECT id AS "Id"
FROM (
    SELECT 
        id,
        temperature,
        LAG(temperature) OVER (ORDER BY recordDate ASC) AS lag_temp
    FROM weather
) lt 
WHERE temperature > lag_temp;

--Swap Salary

UPDATE salary SET sex = CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END;

--Rank Scores

SELECT 
    score,
    DENSE_RANK() OVER (ORDER BY score DESC) AS "RANK" 
FROM scores;

--Consecutive Numbers

SELECT 
    DISTINCT L1.num AS ConsecutiveNums
FROM logs L1 
JOIN logs L2 
ON L1.num = L2.num 
AND L1.id = L2.id - 1
JOIN logs L3 
ON L1.num = L3.num 
AND L2.id = L3.id - 1;

--Department Highest Salary

SELECT d.name AS "Department", e.name AS "Employee", e.salary
FROM department d 
LEFT JOIN employee e 
ON e.departmentId = d.id 
WHERE (d.name, e.salary) IN (
    SELECT d.name, MAX(e.salary)
    FROM department d 
    LEFT JOIN employee e 
    ON e.departmentId = d.id 
    GROUP BY 1
);

--Managers with at Least 5 Direct Reports

SELECT name
FROM employee
WHERE id IN (
    SELECT managerId
    FROM employee
    GROUP BY 1
    HAVING COUNT(id) >= 5
);

--Winning Candidate

SELECT name 
FROM (
    SELECT 
        c.name,
        RANK() OVER (ORDER BY COUNT(v.id) DESC) AS rnk
    FROM vote v 
    JOIN candidate c 
    ON v.candidateId = c.id
    GROUP BY 1
) vote_rnk
WHERE rnk = 1;

--Count Student Number in Departments

SELECT dept_name, COUNT(student_id) AS student_number
FROM department d 
LEFT JOIN student s 
ON d.dept_id = s.dept_id
GROUP BY 1
ORDER BY 2 DESC, 1 ASC;

--Investments in 2016

SELECT ROUND(SUM(tiv_2016), 2) AS tiv_2016
FROM insurance
WHERE tiv_2015 IN (
    SELECT tiv_2015
    FROM insurance
    GROUP BY 1
    HAVING COUNT(pid) > 1
)
AND (lat, lon) IN (
    SELECT lat, lon
    FROM insurance
    GROUP BY 1, 2
    HAVING COUNT(pid) = 1
);

--Tree Node

SELECT 
    id,
    CASE
        WHEN p_id IS NULL THEN 'Root'
        WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
        ELSE 'Leaf'
    END AS type
FROM tree;

--Shortest Distance in a Plane

SELECT MIN(SQRT(POWER(p2.x - p1.x, 2) + POWER(p2.y - p1.y, 2))) AS shortest
FROM point_2d p1
JOIN point_2d p2 
ON p1.x <> p2.x
OR p1.y <> p2.y;

--Exchange Seats

SELECT 
    id,
    COALESCE(CASE
        WHEN id % 2 = 0 THEN LAG(student) OVER (ORDER BY id)
        ELSE LEAD(student) OVER (ORDER BY id)
    END, student) AS student
FROM seat;

--Second Degree Follower

SELECT followee AS follower, COUNT(follower) AS num
FROM follow
WHERE followee IN (SELECT follower FROM follow)
GROUP BY 1;

--Find the Missing IDs

WITH series_CTE AS (
    SELECT GENERATE_SERIES(MIN(customer_id), MAX(customer_id)) AS ids
    FROM customers
)

SELECT s.ids
FROM series_CTE s 
LEFT JOIN customers c
ON s.ids = c.customer_id
WHERE c.customer_id IS NULL;

--Number of Calls Between Two Persons

SELECT 
    LEAST(from_id, to_id) AS person1, 
    GREATEST(from_id, to_id) AS person2, 
    COUNT(*) AS call_count,
    SUM(duration) AS total_duration
FROM calls
GROUP BY 1, 2;

--Biggest Window Between Visits

SELECT 
    user_id,
    MAX(lead_visit_date - visit_date) AS biggest_window
FROM (
    SELECT 
        user_id,
        visit_date,
        COALESCE(LEAD(visit_date) OVER (PARTITION BY user_id ORDER BY visit_date), '2021-1-1') AS lead_visit_date
    FROM userVisits
) lead_dates
GROUP BY 1;

--CN Banned

SELECT 
    DISTINCT l1.account_id
FROM logInfo l1
JOIN logInfo l2
ON l1.account_id = l2.account_id
AND l1.ip_address <> l2.ip_address
WHERE (l1.login BETWEEN l2.login AND l2.logout) 
OR (l1.logout BETWEEN l2.login AND l2.logout) 
OR (l1.login < l2.login AND l1.logout > l2.logout) 
OR (l1.login > l2.login AND l1.logout < l2.logout);

--Maximum Transaction Each Day

SELECT transaction_id
FROM transactions
WHERE (CAST(day AS DATE), amount) IN (
    SELECT CAST(day AS DATE), MAX(amount)
    FROM transactions
    GROUP BY 1
)
ORDER BY 1 ASC;

--Premier League Stats

WITH home_team_CTE AS (
    SELECT t.team_name, m.home_team_goals AS goals_for, m.away_team_goals AS goals_against
    FROM matches m 
    JOIN teams t 
    ON t.team_id = m.home_team_id
), away_team_CTE AS (
    SELECT t.team_name, m.away_team_goals AS goals_for, m.home_team_goals AS goals_against
    FROM matches m 
    JOIN teams t 
    ON t.team_id = m.away_team_id
)

SELECT
    team_name,
    COUNT(*) AS matches_played,
    SUM(CASE
        WHEN goals_for > goals_against THEN 3
        WHEN goals_for = goals_against THEN 1
        WHEN goals_for < goals_against THEN 0
        END) AS points,
    SUM(goals_for) AS goal_for,
    SUM(goals_against) AS goal_against,
    SUM(goals_for) - SUM(goals_against) AS goal_diff
FROM (
    SELECT team_name, goals_for, goals_against
    FROM home_team_CTE
    UNION ALL
    SELECT team_name, goals_for, goals_against
    FROM away_team_CTE
) union_CTE
GROUP BY team_name
ORDER BY points DESC, goal_diff DESC, team_name ASC;

--Department Top Three Salaries

SELECT department AS "Department", employee AS "Employee", salary AS "Salary"
FROM (
    SELECT 
        d.name AS department, 
        e.name AS employee, 
        e.salary, 
        DENSE_RANK() OVER (PARTITION BY d.name ORDER BY e.salary DESC) AS rnk
    FROM employee e 
    JOIN department d 
    ON e.departmentId = d.id 
) dept_salary_rnk
WHERE rnk <= 3;

--Human Traffic of Stadium

WITH rn_diff_CTE AS (
    SELECT *, id - ROW_NUMBER() OVER (ORDER BY visit_date) AS rn_diff
    FROM stadium
    WHERE people >= 100
)

SELECT id, visit_date, people
FROM rn_diff_CTE
WHERE rn_diff IN (
    SELECT rn_diff
    FROM rn_diff_CTE
    GROUP BY rn_diff
    HAVING COUNT(id) >= 3
);

--Geography Report

SELECT 
    MAX(CASE WHEN continent = 'America' THEN name ELSE NULL END) AS America,
    MAX(CASE WHEN continent = 'Asia' THEN name ELSE NULL END) AS Asia,
    MAX(CASE WHEN continent = 'Europe' THEN name ELSE NULL END) AS Europe
FROM (
    SELECT 
        *, 
        ROW_NUMBER() OVER (PARTITION BY continent ORDER BY name ASC) AS rn
    FROM student
) alpha_student
GROUP BY rn
ORDER BY rn ASC;

--Warehouse Manager

SELECT w.name AS warehouse_name, SUM(w.units * p.width * p.length * p.height) AS volume
FROM warehouse w 
JOIN products p 
ON w.product_id = p.product_id
GROUP BY 1
ORDER BY 1 ASC;

--Recyclable and Low Fat Products

SELECT product_id
FROM products 
WHERE low_fats = 'Y'
AND recyclable = 'Y';

--Article

WITH article_count_CTE AS (
    SELECT
        view_date,
        viewer_id,
        article_id,
        DENSE_RANK() OVER (PARTITION BY view_date, viewer_id ORDER BY article_id) AS dns_rnk
    FROM views
    ORDER BY 1
)

SELECT DISTINCT viewer_id AS id
FROM article_count_CTE
WHERE dns_rnk >= 2;

--Immediate Food Delivery

WITH order_num_CTE AS (
    SELECT 
        *,
        RANK() OVER (PARTITION BY customer_id ORDER BY order_date) AS rnk
    FROM delivery
)

SELECT ROUND(COUNT(*) * 100 / (SELECT COUNT(*) FROM order_num_CTE WHERE rnk = 1), 2) AS immediate_percentage
FROM order_num_CTE
WHERE rnk = 1
AND order_date = customer_pref_delivery_date;

--Ad-Free Sessions

SELECT DISTINCT p.session_id
FROM playback p 
JOIN ads a 
ON p.customer_id = a.customer_id
WHERE a.timestamp NOT BETWEEN p.start_time AND p.end_time
ORDER BY 1;

--Patients With a Condition

SELECT patient_id, patient_name, conditions
FROM patients
WHERE conditions LIKE '%DIAB1%';

--Fix the Issue

SELECT
    TRIM(LOWER(product_name)) AS product_name,
    TO_CHAR(sale_date, 'YYYY-MM') AS sale_date,
    COUNT(*) AS total
FROM sales
GROUP BY 1, 2
ORDER BY 1, 2;

--All Valid Triplets That Can Represent a Country

SELECT 
    a.student_name AS member_A,
    b.student_name AS member_B,
    c.student_name AS member_C
FROM schoolA a 
JOIN schoolB b 
ON a.student_id <> b.student_id
AND a.student_name <> b.student_name
JOIN schoolC c 
ON a.student_id <> c.student_id
AND a.student_name <> c.student_name
AND b.student_id <> c.student_id
AND b.student_name <> c.student_name;

--Median Employee Salary

WITH rn_CTE AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (PARTITION BY company ORDER BY salary, id) AS rn,
        COUNT(*) OVER (PARTITION BY company) AS rn_max
    FROM employee
)

SELECT id, company, salary
FROM rn_CTE
WHERE rn = CEILING(rn_max * 1.0 / 2) 
OR rn = CEILING(rn_max * 1.0 / 2 + 0.5);

--Get the Second Most Recent Activity

WITH rnk_CTE AS (
    SELECT
        *,
        RANK() OVER (PARTITION BY username ORDER BY startDate) AS rnk,
        COUNT(*) OVER (PARTITION BY username) AS count
    FROM userActivity
)

SELECT 
    username,
    activity,
    startDate,
    endDate
FROM rnk_CTE
WHERE rnk = 2
OR count = 1;

--Find the Quiet Students in All Exams

WITH loud_student_id_CTE AS (
    SELECT DISTINCT student_id
    FROM (
        SELECT
            *,
            MAX(score) OVER (PARTITION BY exam_id) AS max,
            MIN(score) OVER (PARTITION BY exam_id) AS min 
        FROM exam
    ) max_min_scores
    WHERE score = max 
    OR score = min
)

SELECT DISTINCT s.student_id, s.student_name
FROM student s
JOIN exam e
ON s.student_id = e.student_id
WHERE s.student_id NOT IN (
    SELECT * FROM loud_student_id_CTE
);

--Find Cumulative Salary of an Employee

WITH lag_CTE AS (
    SELECT
        *,
        LAG(salary) OVER (PARTITION BY id ORDER BY month) AS prev_salary,
        LAG(salary, 2) OVER (PARTITION BY id ORDER BY month) AS prev_2_salary,
        LAG(month) OVER (PARTITION BY id ORDER BY month) AS prev_month,
        LAG(month, 2) OVER (PARTITION BY id ORDER BY month) AS prev_2_month,
        MAX(month) OVER (PARTITION BY id) AS recent_month
    FROM employee
)

SELECT
    id,
    month,
    (salary + 
        CASE
            WHEN (prev_salary IS NOT NULL) AND (month - prev_month = 1) 
            THEN prev_salary
            ELSE 0
        END +
        CASE
            WHEN (prev_2_salary IS NOT NULL) AND (month - prev_2_month = 2)
            THEN prev_2_salary
            ELSE 0
        END) AS salary
FROM lag_CTE
WHERE month <> recent_month
ORDER BY id ASC, month DESC;

--Marvel Cities

SELECT *
FROM city
WHERE countryCode = 'Marv'
AND population > 100000;

--Shortest Distance

SELECT MIN(ABS(p2.x - p1.x)) AS shortest
FROM point p1
CROSS JOIN point p2
WHERE p1.x <> p2.x;

--Classes with more than 5 students

SELECT class 
FROM courses
GROUP BY 1
HAVING COUNT(*) >= 5;

--Duplicate Emails

SELECT DISTINCT p1.email
FROM person p1
JOIN person p2
ON p1.email = p2.email
AND p1.id <> p2.id;

--Employees Earning More Than Their Manager

SELECT emp.name AS employee
FROM employee emp 
LEFT JOIN employee mang
ON emp.managerId = mang.id
WHERE emp.salary > mang.salary;

--Customers Who Never Order

SELECT nameCust AS "Customers"
FROM customers
WHERE id NOT IN (
    SELECT customerId
    FROM orders
);

--Delete Duplicate emails

DELETE FROM person
WHERE (id, email) IN (
    SELECT id, email
    FROM (
        SELECT 
            id, 
            email, 
            ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) AS rn 
        FROM person
    ) rn_duplicates
    WHERE rn > 1
);

SELECT *
FROM person;

--Employee Bonus

SELECT e.name, b.bonus
FROM employee e 
LEFT JOIN bonus b 
ON e.empId = b.empId 
WHERE b.bonus < 1000
OR b.bonus IS NULL;

--Customer Placing the Largest Number Orders

SELECT DISTINCT customer_number
FROM orders
WHERE customer_number IN (
    SELECT customer_number
    FROM orders
    GROUP BY 1
    ORDER BY COUNT(*) DESC
    LIMIT 1
);

--Friend Request

SELECT COUNT(*) AS unique_request
FROM (
    SELECT DISTINCT requester_id, accepter_id
    FROM requestAccepted
) distinct_accepted_pairs;

SELECT COUNT(*) AS total_request
FROM (
    SELECT DISTINCT sender_id, send_to_id
    FROM friendRequest
) distinct_request_pairs;

--Consecutive Available Seats

WITH consecutive_available_cte AS (
    SELECT c1.seat_id AS c1, c2.seat_id AS c2
    FROM cinema c1
    JOIN cinema c2
    ON c1.seat_id + 1 = c2.seat_id
    AND c1.free = TRUE
    AND c2.free = TRUE
)

SELECT c1 AS seat_id
FROM consecutive_available_cte
UNION
SELECT c2 AS seat_id
FROM consecutive_available_cte;
