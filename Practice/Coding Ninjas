--Challenges provided by Coding Ninjas: https://www.codingninjas.com/studio/problems?category[]=SQL%20Databases

--IMDb Metacritic Rating

SELECT 
    i.title,
    i.rating
FROM IMDB i
JOIN earning e
ON i.movie_id = e.movie_id
WHERE SUBSTRING(i.title, LENGTH(i.title) - 4, 4) = '2012'
AND i.metaCritic > 60
AND e.domestic > 100000000;

--IMDb Max Weighted Rating

SELECT g.genre, MAX((i.rating + i.metaCritic/10.0)/2) AS weighted_rating
FROM genre g
JOIN imdb i 
ON g.movie_id = i.movie_id
WHERE SUBSTRING(i.title, LENGTH(i.title) - 4, 4) = '2014'
GROUP BY 1
HAVING g.genre IS NOT NULL
AND g.genre <> ''
AND MAX((i.rating + i.metaCritic/10.0)/2) IS NOT NULL
AND MAX((i.rating + i.metaCritic/10.0)/2) <> 0
ORDER BY 1 ASC;

--IMDb Rating

SELECT i.title, i.rating
FROM imdb i
JOIN genre g 
ON i.movie_id = g.movie_id
WHERE g.genre LIKE 'C%'
AND i.title LIKE '%2014%'
AND i.budget > 40000000;

--IMDb Genre

SELECT g.genre, MAX(e.domestic + e.worldwide - i.budget) AS net_profit
FROM imdb i
JOIN genre g 
ON i.movie_id = g.movie_id
JOIN earning e
ON i.movie_id = e.movie_id
WHERE i.title LIKE '%2012%'
GROUP BY 1
HAVING g.genre IS NOT NULL
AND g.genre <> ''
AND MAX(e.domestic + e.worldwide - i.budget) IS NOT NULL
AND MAX(e.domestic + e.worldwide - i.budget) <> 0
ORDER BY 1 ASC;

--Students DB

INSERT INTO students VALUES (3, 'Kim', 'F'), (4, 'Molina', 'F'), (5, 'Dev', 'M');

SELECT * FROM students;

--Big Countries

SELECT name, population, area
FROM world
WHERE area > 3000000
OR population > 25000000;

--Sales Executive

SELECT name
FROM salesperson
WHERE sales_id NOT IN (
    SELECT o.sales_id
    FROM orders o 
    JOIN company c 
    ON o.com_id = c.com_id
    WHERE c.name = 'RED'
);

--Director's Actor

SELECT actor_id, director_id
FROM actorDirector
WHERE actor_id = director_id
GROUP BY 1, 2
HAVING COUNT(*) >= 3;

--Combine Two Tables

SELECT p.firstName, p.lastName, a.city, a.state
FROM person p 
LEFT JOIN address a 
ON p.personId = a.personId;

--Second Highest Salary

SELECT salary
FROM (
    SELECT salary, RANK() OVER (ORDER BY salary DESC) AS rnk
    FROM employee
) salary_rnk
WHERE rnk = 2;

--Rising Temperature

SELECT id AS "Id"
FROM (
    SELECT 
        id,
        temperature,
        LAG(temperature) OVER (ORDER BY recordDate ASC) AS lag_temp
    FROM weather
) lt 
WHERE temperature > lag_temp;

--Swap Salary

UPDATE salary SET sex = CASE WHEN sex = 'm' THEN 'f' ELSE 'm' END;

--Rank Scores

SELECT 
    score,
    DENSE_RANK() OVER (ORDER BY score DESC) AS "RANK" 
FROM scores;

--Consecutive Numbers

SELECT 
    DISTINCT L1.num AS ConsecutiveNums
FROM logs L1 
JOIN logs L2 
ON L1.num = L2.num 
AND L1.id = L2.id - 1
JOIN logs L3 
ON L1.num = L3.num 
AND L2.id = L3.id - 1;

--Department Highest Salary

SELECT d.name AS "Department", e.name AS "Employee", e.salary
FROM department d 
LEFT JOIN employee e 
ON e.departmentId = d.id 
WHERE (d.name, e.salary) IN (
    SELECT d.name, MAX(e.salary)
    FROM department d 
    LEFT JOIN employee e 
    ON e.departmentId = d.id 
    GROUP BY 1
);

--Managers with at Least 5 Direct Reports

SELECT name
FROM employee
WHERE id IN (
    SELECT managerId
    FROM employee
    GROUP BY 1
    HAVING COUNT(id) >= 5
);

--Winning Candidate

SELECT name 
FROM (
    SELECT 
        c.name,
        RANK() OVER (ORDER BY COUNT(v.id) DESC) AS rnk
    FROM vote v 
    JOIN candidate c 
    ON v.candidateId = c.id
    GROUP BY 1
) vote_rnk
WHERE rnk = 1;

--Count Student Number in Departments

SELECT dept_name, COUNT(student_id) AS student_number
FROM department d 
LEFT JOIN student s 
ON d.dept_id = s.dept_id
GROUP BY 1
ORDER BY 2 DESC, 1 ASC;
