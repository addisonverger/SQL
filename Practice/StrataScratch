--Challenges provided by StrataScratch: https://platform.stratascratch.com/coding
--All answers written in MySQL

--Most Profitable Companies

SELECT profits, company
FROM forbes_global_2010_2014
ORDER BY profits DESC
LIMIT 3;

--Counting Instances in Text

WITH CTE AS (
    SELECT GROUP_CONCAT(contents SEPARATOR ' ') AS group_contents
    FROM google_file_store
)

SELECT 'bull' AS word, (LENGTH(group_contents) - LENGTH(REPLACE(group_contents, 'bull', ''))) / LENGTH('bull') AS nentry
FROM CTE
UNION
SELECT 'bear' AS word, (LENGTH(group_contents) - LENGTH(REPLACE(group_contents, 'bear', ''))) / LENGTH('bear') AS nentry
FROM CTE;

--Bikes Last Used

SELECT bike_number, MAX(end_time) AS last_used
FROM dc_bikeshare_q1_2012
GROUP BY bike_number
ORDER BY last_used DESC;

--Lyft Driver Wages

SELECT * 
FROM lyft_drivers
WHERE yearly_salary <= 30000
OR yearly_salary >= 70000;

--Find all posts which were reacted to with a heart

SELECT *
FROM facebook_posts
WHERE post_id IN (
    SELECT post_id
    FROM facebook_reactions
    WHERE reaction = 'heart'
);

--Popularity of Hack

SELECT fe.location, AVG(fhs.popularity) 
FROM facebook_employees fe
JOIN facebook_hack_survey fhs
ON fe.id = fhs.employee_id
GROUP BY fe.location;

--Acceptance Rate By Date

WITH a AS (
    SELECT *
    FROM fb_friend_requests
    WHERE action = 'sent'
), b AS (
    SELECT *
    FROM fb_friend_requests
    WHERE action = 'accepted'
)

SELECT a.date, COUNT(b.user_id_receiver) / COUNT(a.user_id_sender)
FROM a
LEFT JOIN b
ON a.user_id_sender = b.user_id_sender
AND a.user_id_receiver = b.user_id_receiver
GROUP BY a.date
ORDER BY a.date;

--Customer Revenue In March

SELECT cust_id, SUM(total_order_cost) AS revenue
FROM (
    SELECT cust_id, total_order_cost
    FROM orders
    WHERE order_date LIKE '2019-03%'
) 2019_orders
GROUP BY cust_id
ORDER BY revenue DESC;

--Find the rate of processed tickets for each type

SELECT type, AVG(processed)
FROM facebook_complaints
GROUP BY type;

--Highest Energy Consumption

WITH union_CTE AS (
    SELECT date, consumption
    FROM fb_eu_energy
    UNION
    SELECT date, consumption
    FROM fb_asia_energy
    UNION
    SELECT date, consumption
    FROM fb_na_energy
), total_energy_CTE AS (
    SELECT date, SUM(consumption) AS total_energy
    FROM union_CTE
    GROUP BY date
)

SELECT date, total_energy
FROM total_energy_CTE
WHERE total_energy IN (
    SELECT MAX(total_energy)
    FROM total_energy_CTE
);

--Users By Average Session Time

SELECT user_id, AVG(TIMESTAMPDIFF(SECOND, load_time, exit_time)) AS session_time
FROM (
    SELECT 
        DATE(timestamp), 
        user_id, 
        MAX(CASE WHEN action = 'page_load' THEN timestamp ELSE NULL END) AS load_time, 
        MIN(CASE WHEN action = 'page_exit' THEN timestamp ELSE NULL END) AS exit_time
    FROM facebook_web_log
    GROUP BY 1, 2
) temp
GROUP BY user_id
HAVING session_time IS NOT NULL;

--Popularity Percentage

WITH all_users_CTE AS (
    SELECT user1, user2
    FROM facebook_friends
    UNION
    SELECT user2 AS user1, user1 AS user2
    FROM facebook_friends
)

SELECT user1,
    COUNT(user2) / (SELECT COUNT(DISTINCT(user1)) FROM all_users_CTE) * 100 AS percentage_popularity
FROM all_users_CTE
GROUP BY user1
ORDER BY user1;

--Finding Updated Records

SELECT id, first_name, last_name, department_id, MAX(salary) AS max
FROM ms_employee_salary
GROUP BY 1, 2, 3, 4
ORDER BY 1;

--Premium vs Freemium

SELECT 
    f.date, 
    SUM(CASE WHEN a.paying_customer = 'no' THEN f.downloads ELSE 0 END) AS non_paying, 
    SUM(CASE WHEN a.paying_customer = 'yes' THEN f.downloads ELSE 0 END) AS paying
FROM ms_user_dimension u
JOIN ms_acc_dimension a
ON u.acc_id = a.acc_id
JOIN ms_download_facts f
ON u.user_id = f.user_id
GROUP BY f.date
HAVING non_paying > paying
ORDER BY 1 ASC;

--Count the number of movies that Abigail Breslin nominated for oscar

SELECT COUNT(*) AS n_movies_by_abi
FROM oscar_nominees
WHERE nominee = 'Abigail Breslin';

--Average Salaries

SELECT department, first_name, salary, 
    AVG(salary) OVER (PARTITION BY department) AS avg
FROM employee
GROUP BY 1, 2, 3;

--Highest Target Under Manager

SELECT first_name, target
FROM salesforce_employees
WHERE manager_id = 13
AND target = (
    SELECT MAX(target)
    FROM salesforce_employees
    WHERE manager_id = 13
);

--Find how many times each artist appeared on the Spotify ranking list

SELECT artist, COUNT(*) AS n_occurences
FROM spotify_worldwide_daily_song_ranking
GROUP BY artist
ORDER BY n_occurences DESC;

--Find the top 10 ranked songs in 2010

SELECT DISTINCT year_rank, group_name, song_name
FROM billboard_top_100_year_end
WHERE year = 2010
ORDER BY year_rank ASC
LIMIT 10;

--Top Ranked Songs

SELECT trackname, COUNT(*) AS times_top1
FROM spotify_worldwide_daily_song_ranking
WHERE position = 1
GROUP BY trackname
ORDER BY times_top1 DESC;

--Highest Salary In Department

SELECT department, first_name, salary
FROM employee
WHERE (department, salary) IN (
    SELECT department, MAX(salary)
    FROM employee
    GROUP BY department
)
ORDER BY salary DESC;

--Find all wineries which produce wines by possessing aromas of plum, cherry, rose, or hazelnut

SELECT DISTINCT winery
FROM winemag_p1
WHERE LOWER(description) REGEXP '(plum|rose|cherry|hazelnut)([^a-z])';

--Reviews of Categories

WITH CTE AS (
SELECT
y.review_count,
SUBSTRING_INDEX(
  SUBSTRING_INDEX(
    y.categories, ';', numbers.n
  ), ';', -1
) AS category
FROM
  (SELECT 1 AS n UNION ALL
   SELECT 2 UNION ALL SELECT 3 UNION ALL
   SELECT 4 UNION ALL SELECT 5 UNION ALL
   SELECT 6 UNION ALL SELECT 7 UNION ALL
   SELECT 8 UNION ALL SELECT 9 UNION ALL
   SELECT 10 UNION ALL SELECT 11 UNION ALL
   SELECT 12
   ) numbers
INNER JOIN yelp_business y
  ON CHAR_LENGTH(y.categories)
     - CHAR_LENGTH(REPLACE(y.categories, ';', '')) >= numbers.n-1
)

SELECT category, SUM(review_count) AS review_cnt
FROM CTE
GROUP BY category
ORDER BY review_cnt DESC;

--Top Businesses With Most Reviews

SELECT name, review_count
FROM yelp_business
ORDER BY review_count DESC
LIMIT 5;

--Top Cool Votes

SELECT business_name, review_text
FROM yelp_reviews
WHERE cool = (
    SELECT MAX(cool)
    FROM yelp_reviews
);

--Top 5 States With 5 Star Businesses

WITH five_star_businesses AS (
    SELECT state, COUNT(*) AS n_businesses
    FROM yelp_business
    WHERE stars = 5
    GROUP BY state
), top_five AS (
    SELECT n_businesses,
    ROW_NUMBER() OVER (ORDER BY n_businesses DESC) as rn
    FROM five_star_businesses
)

SELECT state, n_businesses
FROM five_star_businesses
WHERE n_businesses IN (
    SELECT n_businesses
    FROM top_five
    WHERE rn <= 5
)
ORDER BY n_businesses DESC, STATE ASC;

--Workers With The Highest Salaries

SELECT t.worker_title
FROM worker w
JOIN title t
ON w.worker_id = t.worker_ref_id
WHERE w.salary = (
    SELECT MAX(salary)
    FROM worker
);

--Salaries Differences

SELECT ABS(MAX(CASE WHEN d.department = 'marketing' THEN e.salary ELSE 0 END) - MAX(CASE WHEN d.department = 'engineering' THEN e.salary ELSE 0 END)) AS sal_diff
FROM db_employee e
JOIN db_dept d
ON e.department_id = d.id;

--Employee and Manager Salaries

SELECT e1.first_name AS employee_name, e1.salary AS employee_salary
FROM employee e1
JOIN employee e2
ON e1.manager_id = e2.id
WHERE e1.salary > e2.salary;

--Largest Olympics

SELECT games, COUNT(DISTINCT id) AS athletes_count
FROM olympics_athletes_events
GROUP BY games
ORDER BY athletes_count DESC
LIMIT 1;

--Find the most profitable company in the financial sector of the entire world along with its continent

SELECT company, continent
FROM forbes_global_2010_2014
WHERE sector = 'Financials'
ORDER BY profits DESC
LIMIT 1;

--Finding User Purchases

SELECT DISTINCT a1.user_id
FROM amazon_transactions a1
JOIN amazon_transactions a2
ON a1.user_id = a2.user_id
AND a1.id <> a2.id
AND a1.created_at >= a2.created_at
WHERE DATEDIFF(a1.created_at, a2.created_at) <= 7
ORDER BY a1.user_id;

--Monthly Percentage Difference

WITH monthly_revenue AS (
    SELECT LEFT(created_at, 7) AS date, SUM(value) AS revenue
    FROM sf_transactions
    GROUP BY date
)

SELECT date AS 'year_month', ROUND((revenue - LAG(revenue) OVER (ORDER BY date))/LAG(revenue) OVER (ORDER BY date)*100, 2) AS revenue_diff_pct
FROM monthly_revenue
ORDER BY date;

--Ranking Most Active Guests

WITH sum_messages AS (
    SELECT id_guest, SUM(n_messages) AS sum_n_messages
    FROM airbnb_contacts
    GROUP BY id_guest
)

SELECT DENSE_RANK() OVER (ORDER BY sum_n_messages DESC) AS ranking, id_guest, sum_n_messages
FROM sum_messages;

--Number Of Units Per Nationality

SELECT h.nationality, COUNT(DISTINCT u.unit_id) AS apartment_count
FROM (
    SELECT host_id, nationality, age
    FROM airbnb_hosts
    WHERE age < 30
) h
JOIN (
    SELECT host_id, unit_id
    FROM airbnb_units
    WHERE unit_type = 'Apartment'
) u
ON h.host_id = u.host_id
GROUP BY h.nationality
ORDER BY apartment_count DESC;

--Find matching hosts and guests in a way that they are both of the same gender and nationality

SELECT DISTINCT h.host_id, g.guest_id
FROM airbnb_hosts h
JOIN airbnb_guests g
ON h.nationality = g.nationality
AND h.gender = g.gender;

--Find the base pay for Police Captains

SELECT employeename, basepay
FROM sf_public_salaries
WHERE jobtitle LIKE '%Captain%'
AND jobtitle LIKE '%Police%';

--Income By Title and Gender

SELECT e.employee_title, e.sex, AVG(e.salary + b.total_bonus) AS avg_compensation
FROM sf_employee e
LEFT JOIN (
    SELECT worker_ref_id, SUM(bonus) AS total_bonus
    FROM sf_bonus
    GROUP BY worker_ref_id
) b
ON e.id = b.worker_ref_id
GROUP BY e.employee_title, e.sex
HAVING avg_compensation IS NOT NULL;

--Activity Rank

SELECT from_user, COUNT(*) AS total_emails, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC, from_user ASC) AS activity_rank
FROM google_gmail_emails
GROUP BY from_user
ORDER BY total_emails DESC, from_user ASC;

--New Products

WITH CTE_2020 AS (
    SELECT company_name, COUNT(*) AS launch_cnt
    FROM car_launches
    WHERE year = 2020
    GROUP BY company_name
), CTE_2019 AS (
    SELECT company_name, COUNT(*) AS launch_cnt
    FROM car_launches
    WHERE year = 2019
    GROUP BY company_name
)

SELECT a.company_name, a.launch_cnt - b.launch_cnt AS net_products
FROM CTE_2020 a
JOIN CTE_2019 b
ON a.company_name = b.company_name
ORDER BY company_name ASC;

--Risky Projects

SELECT p.title, p.budget, CEILING(SUM(e.salary) * DATEDIFF(p.end_date, p.start_date)/365) AS prorated_employee_expense
FROM linkedin_projects p
JOIN linkedin_emp_projects emp_p
ON p.id = emp_p.project_id
JOIN linkedin_employees e
ON emp_p.emp_id = e.id
GROUP BY p.title, p.budget
HAVING p.budget < prorated_employee_expense
ORDER BY p.title ASC;

--City With Most Amenities

SELECT city
FROM (
    SELECT city, SUM(LENGTH(amenities))
    FROM airbnb_search_details
    GROUP BY 1
    ORDER BY 2 DESC
) most_amenities
LIMIT 1;

--Number Of Bathrooms And Bedrooms

SELECT city, property_type, AVG(bathrooms), AVG(bedrooms)
FROM airbnb_search_details
GROUP BY 1, 2;

--Host Popularity Rental Prices

WITH reviews_price_by_host_CTE AS (
    SELECT DISTINCT CONCAT(price,room_type, host_since, zipcode, number_of_reviews) AS host_id, number_of_reviews, price
    FROM airbnb_host_searches
)

SELECT 
    CASE
        WHEN number_of_reviews = 0 THEN 'New'
        WHEN number_of_reviews BETWEEN 1 AND 5 THEN 'Rising'
        WHEN number_of_reviews BETWEEN 6 AND 15 THEN 'Trending Up'
        WHEN number_of_reviews BETWEEN 16 AND 40 THEN 'Popular'
        ELSE 'Hot'
    END AS host_popularity,
    MIN(price) AS min_price,
    AVG(price) AS avg_price,
    MAX(price) AS max_price
FROM reviews_price_by_host_CTE
GROUP BY 1;

--Reviews of Hotel Arena

SELECT hotel_name, reviewer_score, COUNT(*)
FROM hotel_reviews
WHERE hotel_name = 'Hotel Arena'
GROUP BY 1, 2;

--Highest Cost Orders

SELECT c.first_name, SUM(o.total_order_cost) AS total_order_cost, o.order_date
FROM customers c
LEFT JOIN orders o
ON c.id = o.cust_id
GROUP BY 1, 3
HAVING order_date BETWEEN '2019-02-01' AND '2019-05-01'
ORDER BY 2 DESC
LIMIT 1;

--Admin Department Employees Beginning in April or Later

SELECT COUNT(worker_id) AS n_admins
FROM worker
WHERE department = 'Admin'
AND MONTH(joining_date) BETWEEN 4 AND 12;

--Marketing Campaign Success [Advanced]

WITH CTE AS (
    SELECT user_id, created_at, product_id,
    DENSE_RANK() OVER (PARTITION BY user_id ORDER BY created_at) AS den_rank,
    CONCAT(user_id, '_', product_id) AS user_product_id
    FROM marketing_campaign
)

SELECT COUNT(DISTINCT user_id)
FROM CTE
WHERE den_rank > 1
AND user_product_id NOT IN (
    SELECT user_product_id
    FROM CTE
    WHERE den_rank = 1
);

--Customer Details

SELECT c.first_name, c.last_name, c.city, o.order_details
FROM customers c
LEFT JOIN orders o
ON c.id = o.cust_id
ORDER BY 1, 4;

--Order Details

SELECT c.first_name, o.order_date, o.order_details, o.total_order_cost
FROM orders o
JOIN (
    SELECT id, first_name
    FROM customers
    WHERE first_name = 'Jill'
    OR first_name = 'Eva'
) c
ON o.cust_id = c.id
ORDER BY c.id ASC;

--Cookbook Recipes

WITH page_numbers AS (
    SELECT (ROW_NUMBER() OVER (ORDER BY page_number ASC) - 1) * 2 AS left_page_number,
    (ROW_NUMBER() OVER (ORDER BY page_number ASC) - 1) * 2 + 1 AS right_page_number
    FROM cookbook_titles
)

SELECT p.left_page_number, a.title AS left_title, b.title AS right_title
FROM page_numbers p
LEFT JOIN cookbook_titles a
ON p.left_page_number = a.page_number
LEFT JOIN cookbook_titles b
ON p.right_page_number = b.page_number;

--Find the percentage of shipable orders

SELECT COUNT(c.address)/(SELECT COUNT(id) FROM orders) * 100 AS percent_shipable
FROM orders o
LEFT JOIN customers c
ON o.cust_id = c.id;

--Number of Workers by Department Starting in April or Later

SELECT department, COUNT(worker_id) AS num_workers
FROM worker
WHERE MONTH(joining_date) BETWEEN 4 AND 12
GROUP BY 1
ORDER BY 2 DESC;

--Number of Shipments Per Month

SELECT LEFT(shipment_date, 7) AS 'year_month', COUNT(CONCAT(shipment_id, sub_id)) AS count
FROM amazon_shipment
GROUP BY 1;

--Second Highest Salary

WITH rank_CTE AS (
    SELECT salary,
    RANK() OVER (ORDER BY salary DESC) AS salary_rank
    FROM employee
)

SELECT salary
FROM rank_CTE
WHERE salary_rank = 2;

--Count the number of user events performed by MacBookPro users

SELECT event_name, COUNT(*) AS event_count
FROM (
    SELECT event_name, device
    FROM playbook_events
    WHERE device = 'macbook pro'
) AS macbook_pro_events
GROUP BY 1
ORDER BY 2 DESC;

--Premium Acounts

SELECT a.entry_date, COUNT(a.account_id) AS premium_paid_accounts, COUNT(b.account_id) AS premium_paid_accounts_after_7d
FROM premium_accounts_by_day a
LEFT JOIN premium_accounts_by_day b
ON a.account_id = b.account_id
AND DATEDIFF(b.entry_date, a.entry_date) = 7
AND b.final_price > 0
WHERE a.final_price > 0
GROUP BY 1
LIMIT 7;

--Churro Activity Date

SELECT activity_date, pe_description
FROM los_angeles_restaurant_health_inspections
WHERE facility_name = 'STREET CHURROS'
AND score < 95;

--Classify Business Type

SELECT DISTINCT business_name,
    CASE
        WHEN business_name LIKE '%restaurant%' THEN 'restaurant'
        WHEN business_name LIKE '%cafe%' OR business_name LIKE '%café%'
        OR business_name LIKE '%coffee%' THEN 'cafe'
        WHEN business_name LIKE '%school%' THEN 'school'
        ELSE 'other'
    END AS business_type
FROM sf_restaurant_health_violations;

--Find libraries who haven't provided the email address in circulation year 2016 but their notice preference definition is set to email

SELECT DISTINCT home_library_code
FROM library_usage
WHERE circulation_active_year = 2016
AND notice_preference_definition = 'email'
AND provided_email_address = 0;

--Number of violations

SELECT YEAR(inspection_date) AS 'YEAR', COUNT(inspection_id) AS 'n_inspections'
FROM sf_restaurant_health_violations
WHERE business_name = 'Roxanne Cafe'
AND violation_id IS NOT NULL
GROUP BY 1
ORDER BY 1 ASC;

--Find students with a median writing score

WITH rn_CTE AS (
    SELECT *, ROW_NUMBER() OVER (ORDER BY sat_writing ASC) AS rn
    FROM sat_scores
)

SELECT student_id
FROM sat_scores
WHERE sat_writing IN (
    SELECT sat_writing
    FROM rn_CTE
    WHERE rn = (
        ((SELECT MAX(rn) FROM rn_CTE) + 1) / 2
    )
);

--Make a report showing the number of survivors and non-survivors by passenger class

SELECT survived, SUM(CASE WHEN pclass = 1 THEN 1 ELSE 0 END) AS first_class, SUM(CASE WHEN pclass = 2 THEN 1 ELSE 0 END) AS second_class, SUM(CASE WHEN pclass = 3 THEN 1 ELSE 0 END) AS third_class
FROM titanic
GROUP BY 1;

--Election Results

WITH vote_rn_CTE AS (
    SELECT voter, candidate, ROW_NUMBER() OVER (PARTITION BY voter) AS vote_rn
    FROM voting_results
    WHERE candidate IS NOT NULL
), vote_points_CTE AS (
    SELECT voter, (1 / MAX(vote_rn)) AS vote_points
    FROM vote_rn_CTE
    GROUP BY 1
)

SELECT candidate
FROM (
    SELECT a.candidate, SUM(b.vote_points), DENSE_RANK() OVER (ORDER BY SUM(b.vote_points) DESC) AS winner_rank
    FROM vote_rn_CTE a
    JOIN vote_points_CTE b
    ON a.voter = b.voter
    GROUP BY 1
) total_vote_points
WHERE winner_rank = 1;

--User with Most Approved Flags

SELECT username
FROM (
    SELECT CONCAT(user_firstname, ' ', user_lastname) AS username, DENSE_RANK () OVER (ORDER BY COUNT(DISTINCT f.video_id) DESC) AS approved_cnt_rnk
    FROM user_flags f
    JOIN flag_review r
    ON f.flag_id = r.flag_id
    WHERE r.reviewed_outcome = 'APPROVED'
    GROUP BY 1
) a
WHERE approved_cnt_rnk = 1;

--Flags per Video

SELECT video_id, COUNT(DISTINCT CONCAT(COALESCE(user_firstname, ''), COALESCE(user_lastname, ''))) AS num_unique_users
FROM (SELECT * FROM user_flags WHERE flag_id IS NOT NULL) uf
GROUP BY 1;

--Apple Product Counts

SELECT 
    u.language, 
    COUNT(DISTINCT(CASE WHEN e.device IN ('macbook pro', 'iphone 5s', 'ipad air') THEN u.user_id ELSE NULL END)) AS n_apple_users, 
    COUNT(DISTINCT u.user_id) AS n_total_users
FROM playbook_users u
JOIN playbook_events e
ON u.user_id = e.user_id
GROUP BY 1
ORDER BY 3 DESC;

--Most Lucrative Products

SELECT product_id, SUM(cost_in_dollars * units_sold) AS revenue
FROM online_orders
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;

--Share of Active Users

SELECT COUNT(CASE WHEN status = 'open' THEN user_id ELSE NULL END)/COUNT(user_id) AS active_users_share
FROM fb_active_users
WHERE country = 'USA';

--Spam Posts

SELECT p.post_date, COUNT(CASE WHEN post_keywords LIKE '%spam%' THEN pv.viewer_id ELSE NULL END) / COUNT(pv.viewer_id) * 100 AS spam_share 
FROM facebook_posts p
JOIN facebook_post_views pv
ON p.post_id = pv.post_id
GROUP BY 1;

--Unique Users Per Client Per Month

SELECT client_id, MONTH(time_id), COUNT(DISTINCT user_id)
FROM fact_events
GROUP BY 1, 2;

--The Most Popular Client_Id Among Users Using Video and Voice Calls

WITH event_cnt_CTE AS (
    SELECT user_id, COUNT(CASE WHEN event_type IN ('video call received', 'video call sent', 'voice call received', 'voice call sent') THEN event_id ELSE NULL END) / COUNT(event_id) AS evnt_perc
    FROM fact_events
    GROUP BY 1
    HAVING evnt_perc >= .50
)

SELECT client_id
FROM (
    SELECT client_id, RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk
    FROM fact_events e
    JOIN event_cnt_CTE c
    ON e.user_id = c.user_id
    GROUP BY 1
) AS client_id_rnk
WHERE rnk = 1;

--Top Percentile Fraud

SELECT policy_num, state, claim_cost, fraud_score
FROM (
    SELECT *, PERCENT_RANK() OVER (PARTITION BY state ORDER BY fraud_score) AS percent_rnk
    FROM fraud_score
) percent_rnk_qry
WHERE percent_rnk >= .95;

--Retention Rate

WITH retention_cnt_CTE AS (
    SELECT 
        account_id, 
        COUNT(DISTINCT(CASE WHEN YEAR(date) = 2020 AND MONTH(date) = 12 THEN user_id ELSE NULL END)) AS dec_2020_cnt, 
        COUNT(DISTINCT(CASE WHEN YEAR(date) = 2021 AND MONTH(date) = 1 THEN user_id ELSE NULL END)) AS jan_2021_cnt, 
        COUNT(DISTINCT(CASE WHEN YEAR(date) = 2021 AND MONTH(date) = 2 THEN user_id ELSE NULL END)) AS feb_2021_cnt
    FROM sf_events
    GROUP BY 1
)

SELECT account_id, ROUND((feb_2021_cnt / jan_2021_cnt) / (jan_2021_cnt / dec_2020_cnt)) AS retention
FROM retention_cnt_CTE;
