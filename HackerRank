--Challenges provided by HackerRank: https://www.hackerrank.com/
--All answers written in MySQL

--Revising the Select Query I

SELECT * FROM city
WHERE population > 100000
AND countrycode = 'USA';

--Revising the Select Query II

SELECT name FROM city 
WHERE population > 120000
AND countrycode = 'USA';

--Select All

SELECT * FROM city;

--Select By ID

SELECT * FROM city
WHERE id = 1661;

--Japanese Cities' Attributes

SELECT * FROM city
WHERE countrycode = 'JPN';

--Japanese Cities' Names

SELECT name FROM city
WHERE countrycode = 'JPN';

--Weather Observation Station 1

SELECT city, state FROM station;

--Weather Observation Station 2

SELECT CONCAT(ROUND(SUM(lat_n), 2), ' ', ROUND(SUM(long_w), 2))
FROM station;

--Weather Observation Station 3

SELECT  DISTINCT city FROM station
WHERE id % 2 = 0;

--Weather Observation Station 4

SELECT (COUNT(city) - COUNT(DISTINCT city)) 
FROM station;

--Weather Observation Station 5

SELECT city, CHAR_LENGTH(city) FROM station
ORDER BY CHAR_LENGTH(city) ASC, city LIMIT 1;

--Weather Observation Station 6

SELECT DISTINCT city FROM station
WHERE city LIKE "A%"
OR city LIKE "E%"
OR city LIKE "I%"
OR city LIKE "O%"
OR city LIKE "U%";

--Weather Observation Station 7

SELECT DISTINCT city FROM station
WHERE city LIKE '%a'
OR city LIKE '%e'
OR city LIKE '%i'
OR city LIKE '%o'
OR city LIKE '%u';

--Weather Observation Station 8

SELECT DISTINCT city FROM station
WHERE (city LIKE 'A%'
       OR city LIKE 'E%'
       OR city LIKE 'I%'
       OR city LIKE 'O%'
       OR city LIKE 'U%')
AND (city LIKE '%a'
    OR city LIKE '%e'
    OR city LIKE '%i'
    OR city LIKE '%o'
    OR city LIKE '%u');
    
--Weather Observation Station 9

SELECT DISTINCT city FROM station
WHERE city NOT LIKE 'A%'
AND city NOT LIKE 'E%'
AND city NOT LIKE 'I%'
AND city NOT LIKE 'O%'
AND city NOT LIKE 'U%';

--Weather Observation Station 10

SELECT DISTINCT city FROM station
WHERE city NOT LIKE '%a'
AND city NOT LIKE '%e'
AND city NOT LIKE '%i'
AND city NOT LIKE '%o'
AND city NOT LIKE '%u';

--Weather Observation Station 11

SELECT DISTINCT city FROM station
WHERE (city NOT LIKE 'A%'
      AND city NOT LIKE 'E%'
      AND city NOT LIKE 'I%'
      AND city NOT LIKE 'O%'
      AND city NOT LIKE 'U%')
OR (city NOT LIKE '%a'
   AND city NOT LIKE '%e'
   AND city NOT LIKE '%i'
   AND city NOT LIKE '%o'
   AND city NOT LIKE '%u');
   
--Weather Observation Station 12

SELECT DISTINCT city FROM station
WHERE (city NOT LIKE 'A%'
      AND city NOT LIKE 'E%'
      AND city NOT LIKE 'I%'
      AND city NOT LIKE 'O%'
      AND city NOT LIKE 'U%')
AND (city NOT LIKE '%a'
    AND city NOT LIKE '%e'
    AND city NOT LIKE '%i'
    AND city NOT LIKE '%o'
    AND city NOT LIKE '%u');
    
--Higher Than 75 Marks

SELECT name FROM students
WHERE marks > 75
ORDER BY SUBSTR(name, -3, 3) ASC, id ASC;

--Employee Names

SELECT name FROM employee
ORDER BY name ASC;

--Employee Salaries

SELECT name FROM employee
WHERE salary > 2000
AND months < 10
ORDER BY employee_id ASC;

--Top Competitors

SELECT hackers.hacker_id, hackers.name
FROM submissions
JOIN hackers
ON submissions.hacker_id = hackers.hacker_id
JOIN challenges
ON submissions.challenge_id = challenges.challenge_id
JOIN difficulty
ON challenges.difficulty_level = difficulty.difficulty_level
AND submissions.score = difficulty.score
GROUP BY hackers.hacker_id, hackers.name
HAVING (COUNT(challenges.challenge_id)) > 1
ORDER BY (COUNT(challenges.challenge_id)) DESC, hackers.hacker_id ASC;

--Ollivander's Inventory

SELECT w.id, wp.age, w.coins_needed, w.power 
FROM wands w
JOIN wands_property wp
ON w.code = wp.code
AND w.coins_needed IN (
    SELECT MIN(coins_needed) FROM wands
    WHERE wands.code = wp.code
    AND wp.is_evil = 0
    GROUP BY power)
ORDER BY w.power DESC, wp.age DESC;

--Challenges

SELECT hackers.hacker_id, hackers.name, COUNT(challenges.challenge_id) AS challenges_created
FROM hackers
JOIN challenges
ON hackers.hacker_id = challenges.hacker_id
GROUP BY hackers.hacker_id, hackers.name
HAVING challenges_created = (
                            SELECT COUNT(challenge_id) AS max_count FROM challenges
                            GROUP BY hacker_id
                            ORDER BY max_count DESC LIMIT 1)
OR challenges_created IN (
                        SELECT totals.total_count FROM (
                                            SELECT COUNT(challenge_id) AS total_count 
                                             FROM challenges
                                            GROUP BY hacker_id) totals
                        GROUP BY totals.total_count HAVING COUNT(totals.total_count) = 1)
ORDER BY challenges_created DESC, hackers.hacker_id ASC;

--Contest Leaderboard

SELECT
    h.hacker_id,
    h.name,
    SUM(m.max_scores) AS total_score
FROM 
    hackers h
JOIN 
    (SELECT 
        hacker_id,
        challenge_id,
        MAX(score) AS max_scores
    FROM
        submissions
    GROUP BY
        hacker_id, challenge_id) m
ON 
    h.hacker_id = m.hacker_id
GROUP BY
    h.hacker_id, h.name
HAVING
    total_score != 0
ORDER BY
    total_score DESC,
    h.hacker_id ASC;
    
--Weather Observation Station 14

SELECT TRUNCATE(MAX(lat_n), 4) FROM station
WHERE lat_n < 137.2345;

--Weather Observation Station 15

SELECT ROUND(long_w, 4) FROM station
WHERE lat_n < 137.2345
ORDER BY lat_n DESC Limit 1;

--Weather Observation Station 16

SELECT ROUND(lat_n, 4) FROM station
WHERE lat_n > 38.7780
ORDER BY lat_n ASC LIMIT 1;

--Weather Observation Station 17

SELECT ROUND(long_w, 4) FROM station
WHERE lat_n > 38.7780
ORDER BY lat_n ASC LIMIT 1;

--Weather Observation Station 18

SELECT ROUND(ABS(MIN(lat_n) - MAX(lat_n)) + ABS(MIN(long_w) - MAX(long_w)), 4)
FROM station;

--Weather Observation Station 19

SELECT ROUND(SQRT(POW(MAX(lat_n) - MIN(lat_n), 2) + POW(MAX(long_w) - MIN(long_w), 2)), 4) 
FROM station;

--Type of Triangle

SELECT
    CASE
        WHEN triangles.a + triangles.b > triangles.c
        AND triangles.a + triangles.c > triangles.b
        AND triangles.b + triangles.c > triangles.a
        THEN
            CASE
                WHEN triangles.a = triangles.b
                AND triangles.b = triangles.c
                AND triangles.a = triangles.c 
                THEN 'Equilateral'
                WHEN triangles.a = triangles.b
                OR triangles.b = triangles.c
                OR triangles.a = triangles.c
                THEN 'Isosceles'
                ELSE 'Scalene'    
            END
        ELSE 'Not A Triangle'
     END
FROM triangles;

--The PADS

WITH CTE AS (
    SELECT CONCAT(name, '(', LEFT(occupation, 1), ')') AS output, -1 AS occupation_count
    FROM occupations
    UNION
    SELECT CONCAT('There are a total of ', COUNT(*), ' ', LCASE(occupation), 's.') AS output, COUNT(*) AS occupation_count
    FROM occupations 
    GROUP BY occupation)

SELECT output
FROM CTE
ORDER BY occupation_count ASC, output ASC;

--Revising Aggregations - The Count Function

SELECT COUNT(*)
FROM city
WHERE population > 100000;

--Revising Aggregations - The Sum Function

SELECT SUM(population)
FROM city
WHERE district = 'California';

--Revising Aggregations - Averages

SELECT AVG(population)
FROM city
WHERE district = 'California';

--Average Population

SELECT ROUND(AVG(population))
FROM city;

--Japan Population

SELECT SUM(population)
FROM city
WHERE countrycode = 'JPN';

--Population Density Difference

SELECT MAX(population) - MIN(population)
FROM city;

--The Blunder

SELECT CEIL(AVG(salary) - AVG(REPLACE(salary,'0','')))
FROM employees;

--Top Earners

SELECT CONCAT(MAX(months * salary), '  ',
    (SELECT COUNT(employee_id)
    FROM employee
    WHERE (months * salary) = (SELECT MAX(months * salary) FROM employee)))  
FROM employee;
