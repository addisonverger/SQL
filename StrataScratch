--Challenges provided by StrataScratch: https://platform.stratascratch.com/coding
--All answers written in MySQL

--Most Profitable Companies

SELECT profits, company
FROM forbes_global_2010_2014
ORDER BY profits DESC
LIMIT 3;

--Counting Instances in Text

WITH CTE AS (
    SELECT GROUP_CONCAT(contents SEPARATOR ' ') AS group_contents
    FROM google_file_store
)

SELECT 'bull' AS word, (LENGTH(group_contents) - LENGTH(REPLACE(group_contents, 'bull', ''))) / LENGTH('bull') AS nentry
FROM CTE
UNION
SELECT 'bear' AS word, (LENGTH(group_contents) - LENGTH(REPLACE(group_contents, 'bear', ''))) / LENGTH('bear') AS nentry
FROM CTE;

--Bikes Last Used

SELECT bike_number, MAX(end_time) AS last_used
FROM dc_bikeshare_q1_2012
GROUP BY bike_number
ORDER BY last_used DESC;

--Lyft Driver Wages

SELECT * 
FROM lyft_drivers
WHERE yearly_salary <= 30000
OR yearly_salary >= 70000;

--Find all posts which were reacted to with a heart

SELECT *
FROM facebook_posts
WHERE post_id IN (
    SELECT post_id
    FROM facebook_reactions
    WHERE reaction = 'heart'
);

--Popularity of Hack

SELECT fe.location, AVG(fhs.popularity) 
FROM facebook_employees fe
JOIN facebook_hack_survey fhs
ON fe.id = fhs.employee_id
GROUP BY fe.location;

--Acceptance Rate By Date

WITH a AS (
    SELECT *
    FROM fb_friend_requests
    WHERE action = 'sent'
), b AS (
    SELECT *
    FROM fb_friend_requests
    WHERE action = 'accepted'
)

SELECT a.date, COUNT(b.user_id_receiver) / COUNT(a.user_id_sender)
FROM a
LEFT JOIN b
ON a.user_id_sender = b.user_id_sender
AND a.user_id_receiver = b.user_id_receiver
GROUP BY a.date
ORDER BY a.date;

--Customer Revenue In March

SELECT cust_id, SUM(total_order_cost) AS revenue
FROM (
    SELECT cust_id, total_order_cost
    FROM orders
    WHERE order_date LIKE '2019-03%'
) 2019_orders
GROUP BY cust_id
ORDER BY revenue DESC;

--Find the rate of processed tickets for each type

SELECT type, AVG(processed)
FROM facebook_complaints
GROUP BY type;

--Highest Energy Consumption

WITH union_CTE AS (
    SELECT date, consumption
    FROM fb_eu_energy
    UNION
    SELECT date, consumption
    FROM fb_asia_energy
    UNION
    SELECT date, consumption
    FROM fb_na_energy
), total_energy_CTE AS (
    SELECT date, SUM(consumption) AS total_energy
    FROM union_CTE
    GROUP BY date
)

SELECT date, total_energy
FROM total_energy_CTE
WHERE total_energy IN (
    SELECT MAX(total_energy)
    FROM total_energy_CTE
);

--Users By Average Session Time

SELECT user_id, AVG(TIMESTAMPDIFF(SECOND, load_time, exit_time)) AS session_time
FROM (
    SELECT 
        DATE(timestamp), 
        user_id, 
        MAX(CASE WHEN action = 'page_load' THEN timestamp ELSE NULL END) AS load_time, 
        MIN(CASE WHEN action = 'page_exit' THEN timestamp ELSE NULL END) AS exit_time
    FROM facebook_web_log
    GROUP BY 1, 2
) temp
GROUP BY user_id
HAVING session_time IS NOT NULL;

--Popularity Percentage

WITH all_users_CTE AS (
    SELECT user1, user2
    FROM facebook_friends
    UNION
    SELECT user2 AS user1, user1 AS user2
    FROM facebook_friends
)

SELECT user1,
    COUNT(user2) / (SELECT COUNT(DISTINCT(user1)) FROM all_users_CTE) * 100 AS percentage_popularity
FROM all_users_CTE
GROUP BY user1
ORDER BY user1;

--Finding Updated Records

SELECT id, first_name, last_name, department_id, MAX(salary) AS max
FROM ms_employee_salary
GROUP BY 1, 2, 3, 4
ORDER BY 1;

--Premium vs Freemium

SELECT 
    f.date, 
    SUM(CASE WHEN a.paying_customer = 'no' THEN f.downloads ELSE 0 END) AS non_paying, 
    SUM(CASE WHEN a.paying_customer = 'yes' THEN f.downloads ELSE 0 END) AS paying
FROM ms_user_dimension u
JOIN ms_acc_dimension a
ON u.acc_id = a.acc_id
JOIN ms_download_facts f
ON u.user_id = f.user_id
GROUP BY f.date
HAVING non_paying > paying
ORDER BY 1 ASC;

--Count the number of movies that Abigail Breslin nominated for oscar

SELECT COUNT(*) AS n_movies_by_abi
FROM oscar_nominees
WHERE nominee = 'Abigail Breslin';

--Average Salaries

SELECT department, first_name, salary, 
    AVG(salary) OVER (PARTITION BY department) AS avg
FROM employee
GROUP BY 1, 2, 3;

--Highest Target Under Manager

SELECT first_name, target
FROM salesforce_employees
WHERE manager_id = 13
AND target = (
    SELECT MAX(target)
    FROM salesforce_employees
    WHERE manager_id = 13
);

--Find how many times each artist appeared on the Spotify ranking list

SELECT artist, COUNT(*) AS n_occurences
FROM spotify_worldwide_daily_song_ranking
GROUP BY artist
ORDER BY n_occurences DESC;

--Find the top 10 ranked songs in 2010

SELECT DISTINCT year_rank, group_name, song_name
FROM billboard_top_100_year_end
WHERE year = 2010
ORDER BY year_rank ASC
LIMIT 10;

--Top Ranked Songs

SELECT trackname, COUNT(*) AS times_top1
FROM spotify_worldwide_daily_song_ranking
WHERE position = 1
GROUP BY trackname
ORDER BY times_top1 DESC;

--Highest Salary In Department

SELECT department, first_name, salary
FROM employee
WHERE (department, salary) IN (
    SELECT department, MAX(salary)
    FROM employee
    GROUP BY department
)
ORDER BY salary DESC;

--Find all wineries which produce wines by possessing aromas of plum, cherry, rose, or hazelnut

SELECT DISTINCT winery
FROM winemag_p1
WHERE LOWER(description) REGEXP '(plum|rose|cherry|hazelnut)([^a-z])';
