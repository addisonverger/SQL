--Data Cleaning - Nashville Housing Data
--Skills used: Data Cleaning, Updates, Deletes, Joins, CTE's, Windows Functions, Aggregate Functions
--Data Source: https://github.com/AlexTheAnalyst/PortfolioProjects/blob/main/Nashville%20Housing%20Data%20for%20Data%20Cleaning.xlsx
--I used SQLite to query the database.

-- Standardize Date Format

SELECT SaleDate, STRFTIME('%Y-%m-%d', SaleDate)
FROM PortfolioProject.NashvilleHousing;

UPDATE PortfolioProject.NashvilleHousing
SET SaleDate = STRFTIME('%Y-%m-%d', SaleDate);

-- Populate Property Address data

SELECT *
FROM PortfolioProject.NashvilleHousing
ORDER BY ParcelID;

SELECT nh1.ParcelID, nh1.PropertyAddress, nh2.ParcelID, nh2.PropertyAddress, IFNULL(nh1.PropertyAddress, nh2.PropertyAddress)
FROM PortfolioProject.NashvilleHousing nh1
JOIN PortfolioProject.NashvilleHousing nh2
ON nh1.ParcelID = nh2.ParcelID
AND nh1.'UniqueID ' <> nh2.'UniqueID '
WHERE nh1.PropertyAddress IS NULL;

UPDATE PortfolioProject.NashvilleHousing
SET PropertyAddress = IFNULL(nh1.PropertyAddress, nh2.PropertyAddress)
FROM PortfolioProject.NashvilleHousing nh1
JOIN PortfolioProject.NashvilleHousing nh2
ON nh1.ParcelID = nh2.ParcelID
AND nh1.'UniqueID ' <> nh2.'UniqueID '
WHERE nh1.PropertyAddress IS NULL;

-- Breaking out Address(s) into Individual Columns (Address, City, State)
-- PropertyAddress

SELECT PropertyAddress
FROM PortfolioProject.NashvilleHousing;

SELECT SUBSTRING(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1) AS address,
SUBSTRING(PropertyAddress, INSTR(PropertyAddress, ',') + 1, LENGTH(PropertyAddress)) AS city
FROM PortfolioProject.NashvilleHousing;

ALTER TABLE PortfolioProject.NashvilleHousing
ADD PropertySplitAddress Nvarchar(255);

UPDATE PortfolioProject.NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1);

ALTER TABLE PortfolioProject.NashvilleHousing
ADD PropertySplitCity Nvarchar(255);

UPDATE PortfolioProject.NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, INSTR(PropertyAddress, ',') + 1, LENGTH(PropertyAddress));

-- OwnerAddress

SELECT
SUBSTRING(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1) AS address,
SUBSTRING(OwnerAddress, INSTR(OwnerAddress, ',') + 1, LENGTH(OwnerAddress) - INSTR(OwnerAddress, ',') - 4) AS city,
SUBSTRING(OwnerAddress, LENGTH(OwnerAddress) - 2, 3) AS state
FROM PortfolioProject.NashvilleHousing;

ALTER TABLE PortfolioProject.NashvilleHousing
ADD OwnerSplitAddress Nvarchar(255);

Update PortfolioProject.NashvilleHousing
SET OwnerSplitAddress = SUBSTRING(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1);

ALTER TABLE PortfolioProject.NashvilleHousing
ADD OwnerSplitCity Nvarchar(255);

Update PortfolioProject.NashvilleHousing
SET OwnerSplitCity = SUBSTRING(OwnerAddress, INSTR(OwnerAddress, ',') + 1, LENGTH(OwnerAddress) - INSTR(OwnerAddress, ',') - 4);

ALTER TABLE PortfolioProject.NashvilleHousing
ADD OwnerSplitState Nvarchar(255);

Update PortfolioProject.NashvilleHousing
SET OwnerSplitState = SUBSTRING(OwnerAddress, LENGTH(OwnerAddress) - 2, 3);

-- Change Y and N to Yes and No in "Sold as Vacant" field

SELECT DISTINCT(SoldAsVacant), COUNT(*)
FROM PortfolioProject.NashvilleHousing
GROUP BY SoldAsVacant
ORDER BY 2;

SELECT SoldAsVacant,
    CASE
        WHEN SoldAsVacant = 'Y' THEN 'Yes'
        WHEN SoldAsVacant = 'N' THEN 'No'
        ELSE SoldAsVacant
    END
FROM PortfolioProject.NashvilleHousing;

UPDATE PortfolioProject.NashvilleHousing
SET SoldAsVacant = 
    CASE
        WHEN SoldAsVacant = 'Y' THEN 'Yes'
        WHEN SoldAsVacant = 'N' THEN 'No'
        ELSE SoldAsVacant
    END;

-- Remove Duplicates

WITH RowNumCTE AS (
    SELECT *,
    ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference ORDER BY 'UniqueID ') row_num
    FROM NashvilleHousing
), RowToDeleteCTE AS (
    SELECT "UniqueID "
    FROM RowNumCTE
    WHERE row_num > 1
)

DELETE FROM NashvilleHousing
WHERE "UniqueID " IN RowToDeleteCTE;

-- Delete Unused Columns

ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress;

ALTER TABLE NashvilleHousing
DROP COLUMN TaxDistrict;

ALTER TABLE NashvilleHousing
DROP COLUMN PropertyAddress;
