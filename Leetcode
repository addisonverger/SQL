--Challenges provided by Leetcode: https://leetcode.com/
--All answers written in MySQL

--175. Combine Two Tables

SELECT p.firstName, p.lastName, a.city, a.state
FROM person p
LEFT JOIN address a
ON p.personId = a.personId;

--176. Second Highest Salary

SELECT MAX(salary) AS SecondHighestSalary
FROM employee
WHERE salary NOT IN (SELECT MAX(salary) FROM employee);

--177. Nth Highest Salary

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
    DECLARE M INT;
    SET M=N-1;
  RETURN (
      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1
  );
END

--178. Rank Scores

SELECT score, DENSE_RANK() OVER(ORDER BY score DESC) AS 'rank'
FROM scores
ORDER BY score DESC;

--180. Consecutive Numbers

SELECT DISTINCT L1.num AS ConsecutiveNums
FROM (
  logs L1 JOIN logs L2 ON L1.num = L2.num AND L1.id = L2.id-1
)
JOIN 
  logs L3 ON L1.num = L3.num AND L2.id = L3.id-1;

--181. Employees Earning More Than Their Managers

SELECT E1.name AS Employee
FROM employee E1
JOIN employee E2
ON E1.managerId = E2.id
AND E1.salary > E2.salary;

--182. Duplicate Emails

SELECT email AS Email
FROM person
GROUP BY email
HAVING COUNT(id) > 1;

--183. Customers Who Never Order

SELECT c.name AS Customers
FROM customers c
LEFT JOIN orders o
ON c.id = o.customerId
WHERE o.customerId IS NULL;

--184. Department Highest Salary

SELECT d.name AS Department, e.name AS Employee, e.salary AS Salary
FROM employee e
JOIN department d
ON e.departmentId = d.id
AND (e.departmentId, e.salary) IN
  (SELECT departmentId, MAX(salary) 
  FROM employee 
  GROUP BY departmentId);

--185. Department Top Three Salaries

WITH employee_CTE AS (
  SELECT departmentId, name, salary,
  DENSE_RANK() OVER (PARTITION BY departmentId ORDER BY salary DESC) AS dRank
  FROM employee
)

SELECT d.name AS Department, e.name AS Employee, e.salary AS Salary
FROM employee_CTE e
JOIN department d
ON e.departmentId = d.id
WHERE e.dRank = 1 OR e.dRank = 2 OR e.dRank = 3
ORDER BY Department ASC, Salary DESC, Employee ASC;

--196. Delete Duplicate Emails

DELETE p1 
FROM person p1
JOIN person p2 
ON p1.email = p2.email
WHERE p1.id > p2.id;

--197. Rising Temperature

SELECT w1.id
FROM weather w1
JOIN weather w2
ON DATEDIFF(w1.recordDate, w2.recordDate) = 1 
WHERE w1.temperature > w2.temperature;

--262. Trips and Users

WITH trips_CTE AS (
  SELECT * FROM trips
  WHERE client_id IN (SELECT users_id FROM users WHERE banned = 'No')
  AND driver_id IN (SELECT users_id FROM users WHERE banned = 'No')
)

SELECT request_at AS Day,
ROUND(AVG(
  CASE
    WHEN status = 'completed' THEN 0
    ELSE 1
  END
), 2) AS 'Cancellation Rate'
FROM trips_CTE
GROUP BY Day
HAVING Day BETWEEN "2013-10-01" AND "2013-10-03";

--511. Game Play Analysis I

SELECT player_id, MIN(event_date) AS first_login
FROM activity
GROUP BY player_id;

--550. Game Play Analysis IV

SELECT ROUND(COUNT(DISTINCT a1.player_id)/(SELECT COUNT(DISTINCT player_id) FROM activity), 2) AS fraction 
FROM activity a1
JOIN activity a2 
ON DATE_ADD(a1.event_date, INTERVAL 1 DAY) = a2.event_date
AND a1.player_id = a2.player_id
AND (a1.player_id, a1.event_date) IN (SELECT player_id, MIN(event_date) FROM activity GROUP BY player_id);

--570. Managers with at Least 5 Direct Reports

WITH CTE AS (
  SELECT e1.id, e1.name, COUNT(e2.id) AS direct_reports
  FROM employee e1
  JOIN employee e2
  ON e1.id = e2.managerId
  GROUP BY e1.id, e1.name
)

SELECT name
FROM CTE
WHERE direct_reports >= 5;

--577. Employee Bonus

SELECT e.name, b.bonus
FROM employee e
LEFT JOIN bonus b
ON e.empId = b.empId
WHERE b.bonus < 1000 
OR b.bonus IS NULL;

--584. Find Customer Referee

SELECT name
FROM customer
WHERE referee_id <> 2
OR referee_id IS NULL;

--585. Investments in 2016

WITH tiv_2015_CTE AS (
  SELECT tiv_2015 
  FROM insurance 
  GROUP BY tiv_2015 
  HAVING COUNT(*) > 1
), lat_lon_CTE AS (
  SELECT * 
  FROM insurance 
  GROUP BY lat, lon 
  HAVING COUNT(*) = 1
)

SELECT ROUND(SUM(tiv_2016), 2) AS tiv_2016
FROM lat_lon_CTE
WHERE tiv_2015 IN (SELECT * FROM tiv_2015_CTE);

--586. Customer Placing the Largest Number of Orders

SELECT customer_number
FROM orders
GROUP BY customer_number
ORDER BY COUNT(order_number) DESC 
LIMIT 1;

--595. Big Countries

SELECT name, population, area
FROM world
WHERE area >= 3000000
OR population >= 25000000;

--596. Classes More Than 5 Students

SELECT class
FROM courses
GROUP BY class
HAVING COUNT(student) >= 5;

--601. Human Traffic of Stadium

WITH CTE AS (
  select * , id - ROW_NUMBER() OVER(ORDER BY id ASC) AS consec
  from Stadium
  where people >= 100
)

SELECT id, visit_date, people
FROM CTE
WHERE consec IN (
  SELECT consec 
  FROM CTE GROUP BY consec 
  HAVING COUNT(*) >= 3
)
ORDER BY visit_date ASC;

--602. Friend Requests II: Who Has the Most Friends

SELECT ids.id, COUNT(*) AS num
FROM (
  SELECT requester_id AS id 
  FROM requestAccepted
  UNION ALL
  SELECT accepter_id AS id
  FROM requestAccepted
) AS ids
GROUP BY ids.id
ORDER BY num DESC LIMIT 1;

--607. Sales Person

SELECT name
FROM salesPerson
WHERE name NOT IN (
  SELECT s.name
  FROM salesPerson s
  LEFT JOIN orders o
  ON s.sales_id = o.sales_id
  LEFT JOIN company c
  ON o.com_id = c.com_id
  WHERE c.name = 'RED'
);

--608. Tree Node

SELECT id,
  CASE
    WHEN p_id IS NULL THEN 'Root'
    WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
    ELSE 'Leaf'
  END AS type
FROM tree;

--610. Triangle Judgement

SELECT x, y, z,
  CASE 
    WHEN x + y > z
    AND x + z > y
    AND y + z > x
    THEN 'Yes'
    ELSE 'No'
  END AS triangle
FROM triangle;

--619. Biggest Single Number

SELECT 
  CASE 
    WHEN count = 1 THEN num
    ELSE Null
  END AS num
FROM (
  SELECT num, COUNT(*) AS count
  FROM myNumbers
  GROUP BY num
) AS num_counts
ORDER BY num DESC
LIMIT 1;

--620. Not Boring Movies

SELECT *
FROM cinema
WHERE id % 2 != 0
AND description != 'boring'
ORDER BY rating DESC;

--626. Exchange Seats

SELECT id,
  CASE 
    WHEN id % 2 = 0 THEN (LAG(student) OVER (ORDER BY id))
    ELSE IFNULL(LEAD(student) OVER (ORDER BY id), student)
  END AS "student"
FROM seat;

--627. Swap Salary

UPDATE salary 
SET sex = CASE sex
  WHEN 'm' THEN 'f'
  WHEN 'f' THEN 'm'
  ELSE sex
  END
WHERE sex IN ('m', 'f');

--1045. Customers Who Bought All Products

SELECT customer_id
FROM (
  SELECT customer_id, COUNT(DISTINCT product_key) AS count
  FROM customer
  GROUP BY customer_id
) AS a
WHERE a.count = (SELECT COUNT(*) FROM product);

--1050. Actors and Directors Who Cooperated At Least Three Times

SELECT actor_id, director_id
FROM actorDirector
GROUP BY actor_id, director_id
HAVING COUNT(*) >= 3;

--1068. Product Sales Analysis I

SELECT p.product_name, s.year, s.price
FROM sales s
JOIN product p
ON s.product_id = p.product_id
ORDER BY sale_id;

--1070. Product Sales Analysis III

SELECT product_id, year AS first_year, quantity, price
FROM sales
WHERE (product_id, year) IN (
  SELECT product_id, MIN(year) 
  FROM sales 
  GROUP BY product_id
);

--1075. Project Employees I

SELECT p.project_id, ROUND(AVG(experience_years), 2) AS average_years
FROM project p
JOIN employee e
ON p.employee_id = e.employee_id
GROUP BY p.project_id;
